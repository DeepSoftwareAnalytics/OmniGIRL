{"model_name_or_path": "agentless", "instance_id": "statsmodels__statsmodels-7757", "model_patch": "diff --git a/statsmodels/miscmodels/ordinal_model.py b/statsmodels/miscmodels/ordinal_model.py\nindex 91fc8bc..be398de 100644\n--- a/statsmodels/miscmodels/ordinal_model.py\n+++ b/statsmodels/miscmodels/ordinal_model.py\n@@ -132,6 +132,9 @@ class OrderedModel(GenericLikelihoodModel):\n         k_levels = None  # initialize\n         if not is_pandas:\n             if self.endog.ndim == 1:\n+                # Check for NaN values before processing\n+                if np.any(np.isnan(self.endog)):\n+                    raise ValueError(\"missing values in endog are not supported\")\n                 unique, index = np.unique(self.endog, return_inverse=True)\n                 self.endog = index\n                 labels = unique\n"}
{"model_name_or_path": "agentless", "instance_id": "tqdm__tqdm-535", "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 26f9ce8..5dc7de9 100644\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -558,24 +558,37 @@ class tqdm(object):\n                     Transmitted to `df.apply()`.\n                 \"\"\"\n \n-                # Precompute total iterations\n-                total = getattr(df, 'ngroups', None)\n-                if total is None:  # not grouped\n-                    if df_function == 'applymap':\n-                        total = df.size\n-                    elif isinstance(df, Series):\n-                        total = len(df)\n-                    else:  # DataFrame or Panel\n-                        axis = kwargs.get('axis', 0)\n-                        # when axis=0, total is shape[axis1]\n-                        total = df.size // df.shape[axis]\n+                # Get manually specified total if any\n+                manual_total = next((t for t in targs if isinstance(t, (int, float))), None)\n+                if manual_total is not None:\n+                    # Show warning about manual total override\n+                    from tqdm import TqdmWarning\n+                    import warnings\n+                    warnings.warn(\"Setting `total` manually in tqdm.pandas() is not \"\n+                                \"recommended. It will overwrite `total` in progress_apply|progress_applymap\",\n+                                TqdmWarning, stacklevel=2)\n+                    total = manual_total\n+                else:\n+                    # Precompute total iterations\n+                    total = getattr(df, 'ngroups', None)\n+                    if total is None:  # not grouped\n+                        if df_function == 'applymap':\n+                            total = df.size\n+                        elif isinstance(df, Series):\n+                            total = len(df)\n+                        else:  # DataFrame or Panel\n+                            axis = kwargs.get('axis', 0)\n+                            # when axis=0, total is shape[axis1]\n+                            total = df.size // df.shape[axis]\n \n                 # Init bar\n                 if deprecated_t[0] is not None:\n                     t = deprecated_t[0]\n                     deprecated_t[0] = None\n                 else:\n-                    t = tclass(*targs, total=total, **tkwargs)\n+                    # Remove any manual total from targs to avoid conflicts\n+                    filtered_targs = tuple(t for t in targs if not isinstance(t, (int, float)))\n+                    t = tclass(*filtered_targs, total=total, **tkwargs)\n \n                 if len(args) > 0:\n                     # *args intentionally not supported (see #244, #299)\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7789", "model_patch": "diff --git a/src/lib/expandTailwindAtRules.js b/src/lib/expandTailwindAtRules.js\nindex b04cf90..d06bca5 100644\n--- a/src/lib/expandTailwindAtRules.js\n+++ b/src/lib/expandTailwindAtRules.js\n@@ -52,6 +52,11 @@ function getClassCandidates(content, extractor, candidates, seen) {\n   for (let line of content.split('\\n')) {\n     line = line.trim()\n \n+    // Skip comment lines\n+    if (line.startsWith('//') || line.startsWith('/*') || line.startsWith('*')) {\n+      continue\n+    }\n+\n     if (seen.has(line)) {\n       continue\n     }\n@@ -289,4 +294,4 @@ export default function expandTailwindAtRules(context) {\n       }\n     })\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-4260", "model_patch": "diff --git a/src/jit/lib/generateRules.js b/src/jit/lib/generateRules.js\nindex 79b701a..a804b4c 100644\n--- a/src/jit/lib/generateRules.js\n+++ b/src/jit/lib/generateRules.js\n@@ -240,7 +240,7 @@ function* resolveMatches(candidate, context) {\n     matches = applyPrefix(matches, context)\n \n     if (important) {\n-      matches = applyImportant(matches, context)\n+      matches = applyImportant(matches)\n     }\n \n     for (let variant of variants) {\n@@ -307,4 +307,4 @@ function generateRules(candidates, context) {\n   })\n }\n \n-export { resolveMatches, generateRules }\n+export { resolveMatches, generateRules }\n"}
{"model_name_or_path": "agentless", "instance_id": "prettier__prettier-12177", "model_patch": "diff --git a/src/language-js/print/statement.js b/src/language-js/print/statement.js\nindex b857574..e926729 100644\n--- a/src/language-js/print/statement.js\n+++ b/src/language-js/print/statement.js\n@@ -161,7 +161,11 @@ function printBody(path, options, print) {\n }\n \n function printSwitchCaseConsequent(path, options, print) {\n-  return printStatementSequence(path, options, print, \"consequent\");\n+  const parts = printStatementSequence(path, options, print, \"consequent\");\n+  if (path.node.leadingComments) {\n+    parts.unshift(\" \");\n+  }\n+  return parts;\n }\n \n const isClassProperty = ({ type }) =>\n@@ -248,4 +252,4 @@ function shouldPrintSemicolonAfterClassProperty(node, nextNode) {\n module.exports = {\n   printBody,\n   printSwitchCaseConsequent,\n-};\n+};\n"}
{"model_name_or_path": "agentless", "instance_id": "webpack__webpack-14782", "model_patch": "diff --git a/lib/sharing/ShareRuntimeModule.js b/lib/sharing/ShareRuntimeModule.js\nindex eca7252..221c6fd 100644\n--- a/lib/sharing/ShareRuntimeModule.js\n+++ b/lib/sharing/ShareRuntimeModule.js\n@@ -87,7 +87,13 @@ class ShareRuntimeModule extends RuntimeModule {\n \t\t\t\t\t\t[\n \t\t\t\t\t\t\t\"var versions = scope[name] = scope[name] || {};\",\n \t\t\t\t\t\t\t\"var activeVersion = versions[version];\",\n-\t\t\t\t\t\t\t\"if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) versions[version] = { get: factory, from: uniqueName, eager: !!eager };\"\n+\t\t\t\t\t\t\t\"if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) {\",\n+\t\t\t\t\t\t\t\"    versions[version] = { get: factory, from: uniqueName, eager: !!eager };\",\n+\t\t\t\t\t\t\t\"} else if(activeVersion && version !== activeVersion.version) {\",\n+\t\t\t\t\t\t\t\"    var requirerInfo = uniqueName ? ' (required by ' + uniqueName + ')' : '';\",\n+\t\t\t\t\t\t\t\"    var currentInfo = activeVersion.from ? ' (currently used by ' + activeVersion.from + ')' : '';\",\n+\t\t\t\t\t\t\t\"    warn('Version mismatch for shared module ' + name + ': version ' + version + requirerInfo + ' conflicts with version ' + activeVersion.version + currentInfo);\"\n+\t\t\t\t\t\t\t\"}\"\n \t\t\t\t\t\t]\n \t\t\t\t\t)};`,\n \t\t\t\t\t`var initExternal = ${runtimeTemplate.basicFunction(\"id\", [\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-11111", "model_patch": "diff --git a/src/util/pseudoElements.js b/src/util/pseudoElements.js\nindex 9f0e54c..3cc1363 100644\n--- a/src/util/pseudoElements.js\n+++ b/src/util/pseudoElements.js\n@@ -138,7 +138,7 @@ function movablePseudos(sel) {\n  * @returns {boolean}\n  */\n function isPseudoElement(node) {\n-  return node.value.startsWith('::') || elementProperties[node.value] !== undefined\n+  return node.value.startsWith('::') || node.value === 'marker' || elementProperties[node.value] !== undefined\n }\n \n /**\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-10212", "model_patch": "diff --git a/src/lib/generateRules.js b/src/lib/generateRules.js\nindex 636b9ea..e7fb6b9 100644\n--- a/src/lib/generateRules.js\n+++ b/src/lib/generateRules.js\n@@ -746,7 +746,7 @@ function* resolveMatches(candidate, context, original = candidate) {\n \n           let selectorOptions = {\n             selector: rule.selector,\n-            candidate: original,\n+            candidate: original.replace(/\\[.*?\\]/g, match => match.replace('[', '&lsqb;').replace(']', '&rsqb;')),\n             base: candidate\n               .split(new RegExp(`\\\\${context?.tailwindConfig?.separator ?? ':'}(?![^[]*\\\\])`))\n               .pop(),\n@@ -864,4 +864,4 @@ function isArbitraryValue(input) {\n   return input.startsWith('[') && input.endsWith(']')\n }\n \n-export { resolveMatches, generateRules }\n+export { resolveMatches, generateRules }\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7588", "model_patch": "diff --git a/src/lib/setupContextUtils.js b/src/lib/setupContextUtils.js\nindex c4740c4..ab08802 100644\n--- a/src/lib/setupContextUtils.js\n+++ b/src/lib/setupContextUtils.js\n@@ -792,7 +792,7 @@ function registerPlugins(plugins, context) {\n   }\n }\n \n-export function createContext(tailwindConfig, changedContent = [], root = postcss.root()) {\n+export function createContext(tailwindConfig, changedContent = [], root = postcss.root({ from: 'tailwind.css' })) {\n   let context = {\n     disposables: [],\n     ruleCache: new Set(),\n@@ -897,4 +897,4 @@ export function getContext(\n   contextSourcesMap.get(context).add(sourcePath)\n \n   return [context, true]\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7665", "model_patch": "diff --git a/src/util/color.js b/src/util/color.js\nindex aa21d66..eab8d5a 100644\n--- a/src/util/color.js\n+++ b/src/util/color.js\n@@ -5,8 +5,10 @@ let SHORT_HEX = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i\n let VALUE = `(?:\\\\d+|\\\\d*\\\\.\\\\d+)%?`\n let SEP = `(?:\\\\s*,\\\\s*|\\\\s+)`\n let ALPHA_SEP = `\\\\s*[,/]\\\\s*`\n+let CSS_VAR = /^var\\((--[^)]+)\\)$/\n+let CSS_VAR_RGB = /^var\\((--[^)]+)\\)(?:\\s*,\\s*var\\((--[^)]+)\\))?(?:\\s*,\\s*var\\((--[^)]+)\\))?$/\n let RGB = new RegExp(\n-  `^rgba?\\\\(\\\\s*(${VALUE})${SEP}(${VALUE})${SEP}(${VALUE})(?:${ALPHA_SEP}(${VALUE}))?\\\\s*\\\\)$`\n+  `^rgba?\\\\(\\\\s*(${VALUE}|var\\\\(--[^)]+\\\\))${SEP}(${VALUE}|var\\\\(--[^)]+\\\\))${SEP}(${VALUE}|var\\\\(--[^)]+\\\\))(?:${ALPHA_SEP}(${VALUE}))?\\\\s*\\\\)$`\n )\n let HSL = new RegExp(\n   `^hsla?\\\\(\\\\s*((?:${VALUE})(?:deg|rad|grad|turn)?)${SEP}(${VALUE})${SEP}(${VALUE})(?:${ALPHA_SEP}(${VALUE}))?\\\\s*\\\\)$`\n"}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-1307", "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 97f2406..04431a8 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -45,14 +45,32 @@ export default (o, c, d) => {\n   }\n \n   const tzOffset = (timestamp, timezone) => {\n+    // Get the initial format parts\n     const formatResult = makeFormatParts(timestamp, timezone)\n     const filled = []\n+    \n+    // Parse the datetime parts\n     for (let i = 0; i < formatResult.length; i += 1) {\n       const { type, value } = formatResult[i]\n       const pos = typeToPos[type]\n \n       if (pos >= 0) {\n         filled[pos] = parseInt(value, 10)\n+    }\n+    \n+    // Create dates in UTC and target timezone\n+    const utcDate = new Date(Date.UTC(\n+      filled[0], // year\n+      filled[1] - 1, // month\n+      filled[2], // day\n+      filled[3], // hour\n+      filled[4], // minute\n+      filled[5] || 0, // second\n+      filled[6] || 0 // millisecond\n+    ))\n+    \n+    // Calculate the actual offset including DST\n+    return (utcDate.getTime() - timestamp) / (60 * 1000)\n       }\n     }\n     const hour = filled[3]\n@@ -147,4 +165,4 @@ export default (o, c, d) => {\n   d.tz.setDefault = function (timezone) {\n     defaultTimezone = timezone\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-8608", "model_patch": "diff --git a/src/lib/setupContextUtils.js b/src/lib/setupContextUtils.js\nindex dc7643d..dd0dda6 100644\n--- a/src/lib/setupContextUtils.js\n+++ b/src/lib/setupContextUtils.js\n@@ -178,7 +178,7 @@ export function isValidVariantFormatString(format) {\n }\n \n export function parseVariant(variant) {\n-  variant = variant\n+  variant = String(variant)\n     .replace(/\\n+/g, '')\n     .replace(/\\s{1,}/g, ' ')\n     .trim()\n@@ -960,4 +960,4 @@ export function getContext(\n   contextSourcesMap.get(context).add(sourcePath)\n \n   return [context, true]\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-2532", "model_patch": ""}
