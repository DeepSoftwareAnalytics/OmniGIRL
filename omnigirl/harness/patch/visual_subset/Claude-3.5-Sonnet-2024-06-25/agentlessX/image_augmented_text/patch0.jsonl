{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-6469", "model_patch": "diff --git a/src/util/escapeClassName.js b/src/util/escapeClassName.js\nindex cb5924a..666df4b 100644\n--- a/src/util/escapeClassName.js\n+++ b/src/util/escapeClassName.js\n@@ -1,8 +1,14 @@\n+\n import parser from 'postcss-selector-parser'\n import escapeCommas from './escapeCommas'\n \n export default function escapeClassName(className) {\n   let node = parser.className()\n   node.value = className\n-  return escapeCommas(node?.raws?.value ?? node.value)\n+  let escaped = escapeCommas(node?.raws?.value ?? node.value)\n+  \n+  // Escape square brackets\n+  escaped = escaped.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')\n+  \n+  return escaped\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-10212", "model_patch": "diff --git a/src/util/escapeClassName.js b/src/util/escapeClassName.js\nindex cb5924a..b8c09c1 100644\n--- a/src/util/escapeClassName.js\n+++ b/src/util/escapeClassName.js\n@@ -1,8 +1,10 @@\n+\n import parser from 'postcss-selector-parser'\n import escapeCommas from './escapeCommas'\n \n export default function escapeClassName(className) {\n   let node = parser.className()\n   node.value = className\n-  return escapeCommas(node?.raws?.value ?? node.value)\n+  let escaped = escapeCommas(node?.raws?.value ?? node.value)\n+  return escaped.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-10943", "model_patch": "diff --git a/src/postcss-plugins/nesting/plugin.js b/src/postcss-plugins/nesting/plugin.js\nindex a13cfd4..c6c7973 100644\n--- a/src/postcss-plugins/nesting/plugin.js\n+++ b/src/postcss-plugins/nesting/plugin.js\n@@ -1,3 +1,4 @@\n+\n import postcss from 'postcss'\n import postcssNested from 'postcss-nested'\n \n@@ -9,8 +10,8 @@ export function nesting(opts = postcssNested) {\n     })\n \n     root.walkAtRules('apply', (rule) => {\n-      rule.before(postcss.decl({ prop: '__apply', value: rule.params, source: rule.source }))\n-      rule.remove()\n+      // Instead of removing the @apply rule, we'll keep it and process it later\n+      rule.name = '__apply'\n     })\n \n     let plugin = (() => {\n@@ -34,9 +35,8 @@ export function nesting(opts = postcssNested) {\n \n     postcss([plugin]).process(root, result.opts).sync()\n \n-    root.walkDecls('__apply', (decl) => {\n-      decl.before(postcss.atRule({ name: 'apply', params: decl.value, source: decl.source }))\n-      decl.remove()\n+    root.walkAtRules('__apply', (rule) => {\n+      rule.name = 'apply'\n     })\n \n     /**\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-8608", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7789", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-1307", "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 97f2406..8dd29f2 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -45,14 +45,10 @@ export default (o, c, d) => {\n   }\n \n   const tzOffset = (timestamp, timezone) => {\n-    const formatResult = makeFormatParts(timestamp, timezone)\n-    const filled = []\n-    for (let i = 0; i < formatResult.length; i += 1) {\n-      const { type, value } = formatResult[i]\n-      const pos = typeToPos[type]\n-\n-      if (pos >= 0) {\n-        filled[pos] = parseInt(value, 10)\n+    const date = new Date(timestamp)\n+    const utc = date.getTime() + (date.getTimezoneOffset() * 60000)\n+    const tz = new Date(utc + (getTimezoneOffset(timezone, timestamp) * 60000))\n+    return (tz.getTime() - date.getTime()) / 60000\n       }\n     }\n     const hour = filled[3]\n@@ -147,4 +143,4 @@ export default (o, c, d) => {\n   d.tz.setDefault = function (timezone) {\n     defaultTimezone = timezone\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-11111", "model_patch": "diff --git a/src/util/pseudoElements.js b/src/util/pseudoElements.js\nindex 9f0e54c..3cc1363 100644\n--- a/src/util/pseudoElements.js\n+++ b/src/util/pseudoElements.js\n@@ -138,7 +138,7 @@ function movablePseudos(sel) {\n  * @returns {boolean}\n  */\n function isPseudoElement(node) {\n-  return node.value.startsWith('::') || elementProperties[node.value] !== undefined\n+  return node.value.startsWith('::') || node.value === 'marker' || elementProperties[node.value] !== undefined\n }\n \n /**\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7588", "model_patch": "diff --git a/src/processTailwindFeatures.js b/src/processTailwindFeatures.js\nindex 952e17a..90323ee 100644\n--- a/src/processTailwindFeatures.js\n+++ b/src/processTailwindFeatures.js\n@@ -32,7 +32,7 @@ export default function processTailwindFeatures(setupContext) {\n         })\n       },\n       createContext(tailwindConfig, changedContent) {\n-        return createContext(tailwindConfig, changedContent, root)\n+        return createContext(tailwindConfig, changedContent, root, result.opts.from)\n       },\n     })(root, result)\n \n"}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-2532", "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 832fb4a..82d43f7 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -53,6 +53,23 @@ export default (o, c, d) => {\n         filled[pos] = parseInt(value, 10)\n       }\n     }\n+\n+    const [year, month, day, hour, minute, second] = filled\n+    let date = new Date(Date.UTC(year, month - 1, day, hour, minute, second))\n+    const localTs = date.getTime()\n+    const [tzYear, tzMonth, tzDay, tzHour, tzMinute, tzSecond] = makeFormatParts(localTs, timezone, {\n+      timeZone: 'UTC'\n+    }).reduce((arr, { type, value }) => {\n+      const pos = typeToPos[type]\n+      if (pos >= 0) {\n+        arr[pos] = parseInt(value, 10)\n+      }\n+      return arr\n+    }, [])\n+    date = new Date(Date.UTC(tzYear, tzMonth - 1, tzDay, tzHour, tzMinute, tzSecond))\n+    return (date.getTime() - localTs) / 60000\n+      }\n+    }\n     const hour = filled[3]\n     // Workaround for the same behavior in different node version\n     // https://github.com/nodejs/node/issues/33027\n@@ -147,4 +164,4 @@ export default (o, c, d) => {\n   d.tz.setDefault = function (timezone) {\n     defaultTimezone = timezone\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-4260", "model_patch": "diff --git a/src/util/resolveConfig.js b/src/util/resolveConfig.js\nindex 3da92b8..de3d084 100644\n--- a/src/util/resolveConfig.js\n+++ b/src/util/resolveConfig.js\n@@ -267,7 +267,7 @@ export default function resolveConfig(configs) {\n   ]\n   const { variantOrder } = allConfigs.find((c) => c.variantOrder)\n \n-  return defaults(\n+  const mergedConfig = defaults(\n     {\n       theme: resolveFunctionKeys(\n         mergeExtensions(mergeThemes(map(allConfigs, (t) => get(t, 'theme', {}))))\n@@ -281,4 +281,9 @@ export default function resolveConfig(configs) {\n     },\n     ...allConfigs\n   )\n+\n+  // Ensure the 'important' option is properly set\n+  mergedConfig.important = allConfigs.some((c) => c.important === true) || mergedConfig.important\n+\n+  return mergedConfig\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "prettier__prettier-12177", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7665", "model_patch": "diff --git a/src/util/withAlphaVariable.js b/src/util/withAlphaVariable.js\nindex 00ed2be..2ab8d04 100644\n--- a/src/util/withAlphaVariable.js\n+++ b/src/util/withAlphaVariable.js\n@@ -1,10 +1,33 @@\n+\n+import { parseColor, formatColor } from './color'\n+\n import { parseColor, formatColor } from './color'\n \n+function isCssVariable(color) {\n+  return color.startsWith('var(--')\n+}\n+\n+function extractCssVariable(color) {\n+  return color.match(/^var\\((.*)\\)$/)[1]\n+}\n+\n+function parseCssVariable(color) {\n+  const values = color.trim().split(',').map(v => v.trim())\n+  if (values.length === 3) {\n+    return { mode: 'rgb', color: values }\n+  }\n+  return null\n+}\n+\n export function withAlphaValue(color, alphaValue, defaultValue) {\n   if (typeof color === 'function') {\n     return color({ opacityValue: alphaValue })\n   }\n \n+  if (isCssVariable(color)) {\n+    return `rgba(var(${extractCssVariable(color)}), ${alphaValue})`\n+  }\n+\n   let parsed = parseColor(color)\n \n   if (parsed === null) {\n@@ -27,6 +50,17 @@ export default function withAlphaVariable({ color, property, variable }) {\n     }\n   }\n \n+  if (isCssVariable(color)) {\n+    return {\n+      [variable]: '1',\n+      ...Object.fromEntries(\n+        properties.map((p) => {\n+          return [p, `rgba(var(${extractCssVariable(color)}), var(${variable}))`]\n+        })\n+      ),\n+    }\n+  }\n+\n   const parsed = parseColor(color)\n \n   if (parsed === null) {\n"}
{"model_name_or_path": "agentless", "instance_id": "webpack__webpack-14782", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "webpack__webpack-15454", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "statsmodels__statsmodels-7757", "model_patch": "diff --git a/statsmodels/miscmodels/ordinal_model.py b/statsmodels/miscmodels/ordinal_model.py\nindex 91fc8bc..89fb869 100644\n--- a/statsmodels/miscmodels/ordinal_model.py\n+++ b/statsmodels/miscmodels/ordinal_model.py\n@@ -211,6 +211,12 @@ class OrderedModel(GenericLikelihoodModel):\n                                      \"not supported\")\n                 endog.name = endog_name\n                 is_pandas = True\n+            elif endog.isnull().any():\n+                raise ValueError(\"missing values in endog are not supported\")\n+        else:\n+            endog = np.asarray(endog)\n+            if np.isnan(endog).any():\n+                raise ValueError(\"missing values in endog are not supported\")\n \n         return endog, labels, is_pandas\n \n"}
{"model_name_or_path": "agentless", "instance_id": "tqdm__tqdm-535", "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 26f9ce8..3785165 100644\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -542,9 +542,16 @@ class tqdm(object):\n         from pandas.core.groupby import GroupBy\n         from pandas.core.groupby import PanelGroupBy\n         from pandas import Panel\n+        from .std import TqdmWarning\n+        import warnings\n \n         deprecated_t = [tkwargs.pop('deprecated_t', None)]\n \n+        if 'total' in tkwargs:\n+            warnings.warn(\"Setting `total` manually in tqdm.pandas() is not recommended. \"\n+                          \"It will overwrite `total` in progress_apply|progress_applymap\",\n+                          TqdmWarning)\n+\n         def inner_generator(df_function='apply'):\n             def inner(df, func, *args, **kwargs):\n                 \"\"\"\n@@ -579,12 +586,12 @@ class tqdm(object):\n \n                 if len(args) > 0:\n                     # *args intentionally not supported (see #244, #299)\n-                    TqdmDeprecationWarning(\n+                    warnings.warn(\n                         \"Except func, normal arguments are intentionally\" +\n                         \" not supported by\" +\n                         \" `(DataFrame|Series|GroupBy).progress_apply`.\" +\n                         \" Use keyword arguments instead.\",\n-                        fp_write=getattr(t.fp, 'write', sys.stderr.write))\n+                        TqdmWarning, stacklevel=2)\n \n                 # Define bar updating wrapper\n                 def wrapper(*args, **kwargs):\n"}
