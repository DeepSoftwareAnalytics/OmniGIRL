[
    {
        "instance_id": "webpack__webpack-15454",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/lib/BannerPlugin.js b/lib/BannerPlugin.js\nindex 81b765831..e3405205e 100644\n--- a/lib/BannerPlugin.js\n+++ b/lib/BannerPlugin.js\n@@ -102,10 +102,10 @@ class BannerPlugin {\n \n \t\t\t\t\t\t\tconst comment = compilation.getPath(banner, data);\n \n-\t\t\t\t\t\t\tcompilation.updateAsset(\n-\t\t\t\t\t\t\t\tfile,\n-\t\t\t\t\t\t\t\told => new ConcatSource(comment, \"\\n\", old)\n-\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t\tconst newSource = new ConcatSource(comment, \"\\n\", old);\n+\t\t\t\t\t\t\tif (old.source() !== newSource.source()) {\n+\t\t\t\t\t\t\t\tcompilation.updateAsset(file, newSource);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-12324",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/util/resolveConfigPath.js b/src/util/resolveConfigPath.js\nindex 2b507894..e3c88f73 100644\n--- a/src/util/resolveConfigPath.js\n+++ b/src/util/resolveConfigPath.js\n@@ -20,13 +20,16 @@ function isString(value) {\n   return typeof value === 'string' || value instanceof String\n }\n \n+import path from 'path';\n+\n export default function resolveConfigPath(pathOrConfig) {\n-  // require('tailwindcss')({ theme: ..., variants: ... })\n+  // Handle in-memory configuration without a file path\n   if (isObject(pathOrConfig) && pathOrConfig.config === undefined && !isEmpty(pathOrConfig)) {\n+    // Ensure internal processing compatibility\n     return null\n   }\n \n-  // require('tailwindcss')({ config: 'custom-config.js' })\n+  // Resolve configuration path from a specified file\n   if (\n     isObject(pathOrConfig) &&\n     pathOrConfig.config !== undefined &&\n@@ -35,7 +38,7 @@ export default function resolveConfigPath(pathOrConfig) {\n     return path.resolve(pathOrConfig.config)\n   }\n \n-  // require('tailwindcss')({ config: { theme: ..., variants: ... } })\n+  // Directly handle in-memory configuration objects\n   if (\n     isObject(pathOrConfig) &&\n     pathOrConfig.config !== undefined &&\n@@ -44,12 +47,12 @@ export default function resolveConfigPath(pathOrConfig) {\n     return null\n   }\n \n-  // require('tailwindcss')('custom-config.js')\n+  // Resolve path string directly when a string is provided\n   if (isString(pathOrConfig)) {\n     return path.resolve(pathOrConfig)\n   }\n \n-  // require('tailwindcss')\n+  // Default handling for direct require without specific configurations\n   return resolveDefaultConfigPath()\n }\n \n"
    },
    {
        "instance_id": "iamkun__dayjs-2532",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 832fb4a..ee11815 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -93,19 +93,19 @@ export default (o, c, d) => {\n   const proto = c.prototype\n \n   proto.tz = function (timezone = defaultTimezone, keepLocalTime) {\n-    const oldOffset = this.utcOffset()\n-    const date = this.toDate()\n-    const target = date.toLocaleString('en-US', { timeZone: timezone })\n-    const diff = Math.round((date - new Date(target)) / 1000 / 60)\n-    let ins = d(target, { locale: this.$L }).$set(MS, this.$ms)\n-      .utcOffset((-Math.round(date.getTimezoneOffset() / 15) * 15) - diff, true)\n-    if (keepLocalTime) {\n-      const newOffset = ins.utcOffset()\n-      ins = ins.add(oldOffset - newOffset, MIN)\n+      const oldOffset = this.utcOffset()\n+      const date = this.toDate()\n+      const target = date.toLocaleString(this.$L, { timeZone: timezone })\n+      const diff = Math.round((date - new Date(target)) / 1000 / 60)\n+      let ins = d(target, { locale: this.$L }).$set(MS, this.$ms)\n+        .utcOffset((-Math.round(date.getTimezoneOffset() / 15) * 15) - diff, true)\n+      if (keepLocalTime) {\n+        const newOffset = ins.utcOffset()\n+        ins = ins.add(oldOffset - newOffset, MIN)\n+      }\n+      ins.$x.$timezone = timezone\n+      return ins\n     }\n-    ins.$x.$timezone = timezone\n-    return ins\n-  }\n \n   proto.offsetName = function (type) {\n     // type: short(default) / long\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-10212",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/lib/generateRules.js b/src/lib/generateRules.js\nindex 636b9eaa..573c5fe1 100644\n--- a/src/lib/generateRules.js\n+++ b/src/lib/generateRules.js\n@@ -172,14 +172,14 @@ function applyVariant(variant, matches, context) {\n     // But we don't want:\n     //   @-[200px]        (`-` is incorrect)\n     //   group[:hover]    (`-` is missing)\n-    let match = /(.)(-?)\\[(.*)\\]/g.exec(variant)\n+    let match = /(.)(-?)\\[([^\\]]*)\\]/g.exec(variant)\n     if (match) {\n       let [, char, seperator, value] = match\n       // @-[200px] case\n       if (char === '@' && seperator === '-') return []\n       // group[:hover] case\n       if (char !== '@' && seperator === '') return []\n-\n+    \n       variant = variant.replace(`${seperator}[${value}]`, '')\n       args.value = value\n     }\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-6469",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/lib/generateRules.js b/src/lib/generateRules.js\nindex 521b3502..9eb31a0b 100644\n--- a/src/lib/generateRules.js\n+++ b/src/lib/generateRules.js\n@@ -249,7 +249,9 @@ function parseRules(rule, cache, options = {}) {\n }\n \n function extractArbitraryProperty(classCandidate, context) {\n-  let [, property, value] = classCandidate.match(/^\\[([a-zA-Z0-9-_]+):(\\S+)\\]$/) ?? []\n+  // Only match if the value doesn't contain nested square brackets\n+  // This prevents matching regular text that happens to contain colons\n+  let [, property, value] = classCandidate.match(/^\\[([a-zA-Z0-9-_]+):([^\\[\\]]+)\\]$/) ?? []\n \n   if (value === undefined) {\n     return null\n"
    },
    {
        "instance_id": "babel__babel-15134",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/packages/babel-parser/src/parser/statement.ts b/packages/babel-parser/src/parser/statement.ts\nindex 60e01e8725..506d98e6f8 100644\n--- a/packages/babel-parser/src/parser/statement.ts\n+++ b/packages/babel-parser/src/parser/statement.ts\n@@ -838,6 +838,7 @@ export default abstract class StatementParser extends ExpressionParser {\n     // Check whether the first token is possibly a contextual keyword, so that\n     // we can forbid `for (async of` if this turns out to be a for-of loop.\n     const startsWithAsync = this.isContextual(tt._async);\n+    const startsWithAwait = this.isContextual(tt._await);\n \n     const refExpressionErrors = new ExpressionErrors();\n     const init = this.parseExpression(true, refExpressionErrors);\n@@ -849,16 +850,16 @@ export default abstract class StatementParser extends ExpressionParser {\n       }\n \n       if (\n-        // `for await (async of []);` is allowed.\n-        awaitAt === null &&\n-        startsWithAsync &&\n-        init.type === \"Identifier\"\n+        awaitAt === null && // Not a for-await loop\n+        init.type === \"Identifier\" &&\n+        (startsWithAsync || startsWithAwait)\n       ) {\n-        // This catches the case where the `async` in `for (async of` was\n-        // parsed as an identifier. If it was parsed as the start of an async\n-        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n-        // further down will raise a more appropriate error.\n-        this.raise(Errors.ForOfAsync, { at: init });\n+        // for (async of [])\n+        // for (await of [])\n+        this.raise(\n+          startsWithAsync ? Errors.ForOfAsync : Errors.ForOfAwait,\n+          { at: init },\n+        );\n       }\n     }\n     if (isForOf || this.match(tt._in)) {\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-7588",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/lib/generateRules.js b/src/lib/generateRules.js\nindex 40322cd1..c7dcc917 100644\n--- a/src/lib/generateRules.js\n+++ b/src/lib/generateRules.js\n@@ -597,12 +597,14 @@ function generateRules(candidates, context) {\n   return allRules.flat(1).map(([{ sort, layer, options }, rule]) => {\n     if (options.respectImportant) {\n       if (strategy) {\n-        let container = postcss.root({ nodes: [rule.clone()] })\n+        // Preserve source information when cloning or parsing\n+        let container = postcss.parse(rule.toString(), { from: rule.source.input.file });\n+        \n         container.walkRules((r) => {\n           if (inKeyframes(r)) {\n             return\n           }\n-\n+        \n           strategy(r)\n         })\n         rule = container.nodes[0]\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-11111",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/corePlugins.js b/src/corePlugins.js\nindex e4d2ff27..bad5eda5 100644\n--- a/src/corePlugins.js\n+++ b/src/corePlugins.js\n@@ -30,13 +30,11 @@ export let variantPlugins = {\n \n     addVariant('marker', [\n       ({ container }) => {\n-        removeAlphaVariables(container, ['--tw-text-opacity'])\n-\n+        // Removed the removal of text opacity to allow color styling\n         return '& *::marker'\n       },\n       ({ container }) => {\n-        removeAlphaVariables(container, ['--tw-text-opacity'])\n-\n+        // Removed the removal of text opacity to allow color styling\n         return '&::marker'\n       },\n     ])\n"
    },
    {
        "instance_id": "webpack__webpack-14782",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/lib/sharing/ConsumeSharedRuntimeModule.js b/lib/sharing/ConsumeSharedRuntimeModule.js\nindex 9a868f4f7..656624134 100644\n--- a/lib/sharing/ConsumeSharedRuntimeModule.js\n+++ b/lib/sharing/ConsumeSharedRuntimeModule.js\n@@ -117,15 +117,19 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {\n \t\t\t\t\t\"return get(scope[key][version]);\"\n \t\t\t\t]\n \t\t\t)};`,\n-\t\t\t`var getStrictSingletonVersion = ${runtimeTemplate.basicFunction(\n-\t\t\t\t\"scope, scopeName, key, requiredVersion\",\n-\t\t\t\t[\n-\t\t\t\t\t\"var version = findSingletonVersionKey(scope, key);\",\n-\t\t\t\t\t\"if (!satisfy(requiredVersion, version)) \" +\n-\t\t\t\t\t\t\"throw new Error(getInvalidSingletonVersionMessage(key, version, requiredVersion));\",\n-\t\t\t\t\t\"return get(scope[key][version]);\"\n-\t\t\t\t]\n-\t\t\t)};`,\n+  \t`var getStrictSingletonVersion = ${runtimeTemplate.basicFunction(\n+  \t\t\"scope, scopeName, key, requiredVersion\",\n+  \t\t[\n+  \t\t\t\"var version = findSingletonVersionKey(scope, key);\",\n+  \t\t\t\"if (!satisfy(requiredVersion, version)) {\",\n+  \t\t\t\"  var source = scope[key] && scope[key][version] && scope[key][version].from ? scope[key][version].from : 'unknown';\",\n+  \t\t\t\"  if (!window.__sharedModuleErrors) window.__sharedModuleErrors = [];\",\n+  \t\t\t\"  window.__sharedModuleErrors.push({ key: key, version: version, requiredVersion: requiredVersion, source: source });\",\n+  \t\t\t\"  return null;\",\n+  \t\t\t\"}\",\n+  \t\t\t\"return get(scope[key][version]);\"\n+  \t\t]\n+  \t)};`,\n \t\t\t`var findValidVersion = ${runtimeTemplate.basicFunction(\n \t\t\t\t\"scope, key, requiredVersion\",\n \t\t\t\t[\n@@ -169,18 +173,40 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {\n \t\t\t\t\"entry.loaded = 1;\",\n \t\t\t\t\"return entry.get()\"\n \t\t\t])};`,\n-\t\t\t`var init = ${runtimeTemplate.returningFunction(\n-\t\t\t\tTemplate.asString([\n-\t\t\t\t\t\"function(scopeName, a, b, c) {\",\n-\t\t\t\t\tTemplate.indent([\n-\t\t\t\t\t\t`var promise = ${RuntimeGlobals.initializeSharing}(scopeName);`,\n-\t\t\t\t\t\t`if (promise && promise.then) return promise.then(fn.bind(fn, scopeName, ${RuntimeGlobals.shareScopeMap}[scopeName], a, b, c));`,\n-\t\t\t\t\t\t`return fn(scopeName, ${RuntimeGlobals.shareScopeMap}[scopeName], a, b, c);`\n-\t\t\t\t\t]),\n-\t\t\t\t\t\"}\"\n-\t\t\t\t]),\n-\t\t\t\t\"fn\"\n-\t\t\t)};`,\n+  \t`var init = ${runtimeTemplate.returningFunction(\n+  \t\tTemplate.asString([\n+  \t\t\t\"function(scopeName, a, b, c) {\",\n+  \t\t\tTemplate.indent([\n+  \t\t\t\t`var promise = ${RuntimeGlobals.initializeSharing}(scopeName);`,\n+  \t\t\t\t`if (promise && promise.then) {`,\n+  \t\t\t\tTemplate.indent([\n+  \t\t\t\t\t\"return promise.then(fn.bind(fn, scopeName, ${RuntimeGlobals.shareScopeMap}[scopeName], a, b, c)).then(function() {\",\n+  \t\t\t\t\tTemplate.indent([\n+  \t\t\t\t\t\t\"if (window.__sharedModuleErrors && window.__sharedModuleErrors.length > 0) {\",\n+  \t\t\t\t\t\tTemplate.indent([\n+  \t\t\t\t\t\t\t\"var errors = window.__sharedModuleErrors;\",\n+  \t\t\t\t\t\t\t\"window.__sharedModuleErrors = [];\",\n+  \t\t\t\t\t\t\t\"throw new Error('Multiple unsatisfied versions detected:\\\\n' + errors.map(err => `Module: ${err.key}, Current: ${err.version}, Required: ${rangeToString(err.requiredVersion)}, By: ${err.source}`).join('\\\\n'));\"\n+  \t\t\t\t\t\t]),\n+  \t\t\t\t\t\t\"}\"\n+  \t\t\t\t\t]),\n+  \t\t\t\t\t\"});\"\n+  \t\t\t\t]),\n+  \t\t\t\t\"}\",\n+  \t\t\t\t`var result = fn(scopeName, ${RuntimeGlobals.shareScopeMap}[scopeName], a, b, c);`,\n+  \t\t\t\t\"if (window.__sharedModuleErrors && window.__sharedModuleErrors.length > 0) {\",\n+  \t\t\t\tTemplate.indent([\n+  \t\t\t\t\t\"var errors = window.__sharedModuleErrors;\",\n+  \t\t\t\t\t\"window.__sharedModuleErrors = [];\",\n+  \t\t\t\t\t\"throw new Error('Multiple unsatisfied versions detected:\\\\n' + errors.map(err => `Module: ${err.key}, Current: ${err.version}, Required: ${rangeToString(err.requiredVersion)}, By: ${err.source}`).join('\\\\n'));\"\n+  \t\t\t\t]),\n+  \t\t\t\t\"}\",\n+  \t\t\t\t\"return result;\"\n+  \t\t\t]),\n+  \t\t\t\"}\"\n+  \t\t]),\n+  \t\t\"fn\"\n+  \t)};`,\n \t\t\t\"\",\n \t\t\t`var load = /*#__PURE__*/ init(${runtimeTemplate.basicFunction(\n \t\t\t\t\"scopeName, scope, key\",\n"
    },
    {
        "instance_id": "prettier__prettier-12177",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/language-js/printer-estree.js b/src/language-js/printer-estree.js\nindex ddb529f6b..ca994cd35 100644\n--- a/src/language-js/printer-estree.js\n+++ b/src/language-js/printer-estree.js\n@@ -693,7 +693,7 @@ function printPathNoParens(path, options, print, args) {\n       if (node.test) {\n         parts.push(\"case \", print(\"test\"), \":\");\n       } else {\n-        parts.push(\"default:\");\n+        parts.push(\"default\", \":\");\n       }\n \n       const consequent = node.consequent.filter(\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-7789",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/lib/expandTailwindAtRules.js b/src/lib/expandTailwindAtRules.js\nindex b04cf90d..0a8ae590 100644\n--- a/src/lib/expandTailwindAtRules.js\n+++ b/src/lib/expandTailwindAtRules.js\n@@ -166,7 +166,9 @@ export default function expandTailwindAtRules(context) {\n     for (let { content, extension } of context.changedContent) {\n       let transformer = getTransformer(context.tailwindConfig, extension)\n       let extractor = getExtractor(context.tailwindConfig, extension)\n-      getClassCandidates(transformer(content), extractor, candidates, seen)\n+      // Exclude comments from being processed as class candidates\n+      let filteredContent = transformer(content).replace(/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g, '')\n+      getClassCandidates(filteredContent, extractor, candidates, seen)\n     }\n \n     env.DEBUG && console.timeEnd('Reading changed files')\ndiff --git a/src/processTailwindFeatures.js b/src/processTailwindFeatures.js\nindex 952e17a1..0337a949 100644\n--- a/src/processTailwindFeatures.js\n+++ b/src/processTailwindFeatures.js\n@@ -45,6 +45,10 @@ export default function processTailwindFeatures(setupContext) {\n     issueFlagNotices(context.tailwindConfig)\n \n     expandTailwindAtRules(context)(root, result)\n+    // Log debug information to verify candidates are filtered correctly\n+    if (env.DEBUG) {\n+      console.log(\"Filtered class candidates: \", [...context.ruleCache])\n+    }\n     // Partition apply rules that are generated by\n     // addComponents, addUtilities and so on.\n     partitionApplyAtRules()(root, result)\n"
    },
    {
        "instance_id": "tqdm__tqdm-535",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 04b2961..2c472b7 100755\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -543,7 +543,11 @@ class tqdm(object):\n         from pandas.core.groupby import PanelGroupBy\n         from pandas import Panel\n \n+        from warnings import warn\n+        from tqdm.std import TqdmWarning\n+        \n         deprecated_t = [tkwargs.pop('deprecated_t', None)]\n+        user_total = tkwargs.pop('total', None)\n \n         def inner_generator(df_function='apply'):\n             def inner(df, func, *args, **kwargs):\n@@ -559,7 +563,7 @@ class tqdm(object):\n                 \"\"\"\n \n                 # Precompute total iterations\n-                total = getattr(df, 'ngroups', None)\n+                total = user_total if user_total is not None else getattr(df, 'ngroups', None)\n                 if total is None:  # not grouped\n                     if df_function == 'applymap':\n                         total = df.size\n@@ -575,6 +579,10 @@ class tqdm(object):\n                     t = deprecated_t[0]\n                     deprecated_t[0] = None\n                 else:\n+                    if user_total is not None:\n+                        warn(\"Setting `total` manually in tqdm.pandas() is not recommended. \"\n+                             \"It will override the auto-calculated total.\",\n+                             TqdmWarning, stacklevel=2)\n                     t = tclass(*targs, total=total, **tkwargs)\n \n                 if len(args) > 0:\n"
    },
    {
        "instance_id": "statsmodels__statsmodels-7757",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/statsmodels/miscmodels/ordinal_model.py b/statsmodels/miscmodels/ordinal_model.py\nindex 8eff75aab..c994b8e71 100644\n--- a/statsmodels/miscmodels/ordinal_model.py\n+++ b/statsmodels/miscmodels/ordinal_model.py\n@@ -128,6 +128,9 @@ class OrderedModel(GenericLikelihoodModel):\n \n         endog, labels, is_pandas = self._check_inputs(endog, exog)\n \n+        if np.any(np.isnan(endog)):\n+            raise ValueError(\"missing values in endog are not supported\")\n+\n         super(OrderedModel, self).__init__(endog, exog, **kwds)\n         k_levels = None  # initialize\n         if not is_pandas:\n"
    }
]