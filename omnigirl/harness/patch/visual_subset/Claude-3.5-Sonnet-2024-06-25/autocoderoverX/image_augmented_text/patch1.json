[
    {
        "instance_id": "tailwindlabs__tailwindcss-10212",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/lib/defaultExtractor.js b/src/lib/defaultExtractor.js\nindex b06c37e9..d8c08d9a 100644\n--- a/src/lib/defaultExtractor.js\n+++ b/src/lib/defaultExtractor.js\n@@ -133,18 +133,18 @@ let ALLOWED_CLASS_CHARACTERS = /[^\"'`\\s<>\\]]+/\n  * @param {string} input\n  */\n function clipAtBalancedParens(input) {\n-  // We are care about this for arbitrary values\n+  // We care about this for arbitrary values\n   if (!input.includes('-[')) {\n     return input\n   }\n \n   let depth = 0\n   let openStringTypes = []\n+  let escapeContentBrackets = false;\n \n   // Find all parens, brackets, quotes, etc\n   // Stop when we end at a balanced pair\n   // This is naive and will treat mismatched parens as balanced\n-  // This shouldn't be a problem in practice though\n   let matches = input.matchAll(SPECIALS)\n \n   // We can't use lookbehind assertions because we have to support Safari\n@@ -158,7 +158,12 @@ function clipAtBalancedParens(input) {\n         0: group,\n       })\n     )\n-  })\n+  }).filter(match => {\n+    if (match[0] === '[' && !match.input.slice(0, match.index).endsWith('-')) {\n+      escapeContentBrackets = true;\n+    }\n+    return !escapeContentBrackets;\n+  });\n \n   for (let match of matches) {\n     let char = match[0]\ndiff --git a/src/lib/generateRules.js b/src/lib/generateRules.js\nindex 636b9eaa..db21f29c 100644\n--- a/src/lib/generateRules.js\n+++ b/src/lib/generateRules.js\n@@ -438,7 +438,7 @@ function isParsableCssValue(property, value) {\n }\n \n function extractArbitraryProperty(classCandidate, context) {\n-  let [, property, value] = classCandidate.match(/^\\[([a-zA-Z0-9-_]+):(\\S+)\\]$/) ?? []\n+  let [, property, value] = classCandidate.match(/^\\[([a-zA-Z0-9-_]+):([^\\]]+)\\]$/) ?? []\n \n   if (value === undefined) {\n     return null\n@@ -452,6 +452,8 @@ function extractArbitraryProperty(classCandidate, context) {\n     return null\n   }\n \n+  // Escape content brackets within value to avoid parsing issues\n+  value = value.replace(/(?<![^[]\\])\\[|\\](?![^[\\]]*\\])/g, char => `\\\\${char}`);\n   let normalized = normalize(value)\n \n   if (!isParsableCssValue(property, normalized)) {\ndiff --git a/src/util/pluginUtils.js b/src/util/pluginUtils.js\nindex e347f404..4791a69f 100644\n--- a/src/util/pluginUtils.js\n+++ b/src/util/pluginUtils.js\n@@ -237,6 +237,9 @@ export function coerceValue(types, modifier, options, tailwindConfig) {\n       value = arbitraryValue\n     }\n \n+    // Escape content brackets within value to avoid parsing issues\n+    value = value.replace(/(?<![^[]\\])\\[|\\](?![^[\\]]*\\])/g, char => `\\\\${char}`);\n+\n     //\n     else if (explicitType !== undefined && !supportedTypes.includes(explicitType)) {\n       return []\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-7789",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/util/normalizeConfig.js b/src/util/normalizeConfig.js\nindex 31518a4d..7c297c07 100644\n--- a/src/util/normalizeConfig.js\n+++ b/src/util/normalizeConfig.js\n@@ -264,7 +264,19 @@ export function normalizeConfig(config) {\n       'Configure your content sources or your generated CSS will be missing styles.',\n       'https://tailwindcss.com/docs/content-configuration',\n     ])\n+  } else {\n+    // Ensure all paths in content.files are valid and meaningful\n+    config.content.files = config.content.files.filter(path => {\n+      if (typeof path === 'string' && path.trim().length > 0) {\n+        return true;\n+      }\n+      log.warn('invalid-content-path', [\n+        `The path ${path} in your Tailwind CSS configuration is invalid or non-informative.`,\n+        'Ensure your configuration paths point to meaningful content files.',\n+      ])\n+      return false;\n+    });\n   }\n-\n+  \n   return config\n }\ndiff --git a/src/util/parseObjectStyles.js b/src/util/parseObjectStyles.js\nindex cb54787d..15a9fb07 100644\n--- a/src/util/parseObjectStyles.js\n+++ b/src/util/parseObjectStyles.js\n@@ -2,12 +2,24 @@ import postcss from 'postcss'\n import postcssNested from 'postcss-nested'\n import postcssJs from 'postcss-js'\n \n+import postcssJs from 'postcss-js';\n+import postcss from 'postcss';\n+\n+// Updated parseObjectStyles to strip out comment-like styles\n export default function parseObjectStyles(styles) {\n   if (!Array.isArray(styles)) {\n     return parseObjectStyles([styles])\n   }\n \n   return styles.flatMap((style) => {\n+    // Exclude styles that are comments or malformed\n+    if (typeof style === 'string' && style.trim().startsWith('//')) {\n+      return [];\n+    }\n+    if (typeof style === 'object' && style.comment) {\n+      return [];\n+    }\n+\n     return postcss([\n       postcssNested({\n         bubble: ['screen'],\n"
    },
    {
        "instance_id": "statsmodels__statsmodels-7757",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/statsmodels/miscmodels/ordinal_model.py b/statsmodels/miscmodels/ordinal_model.py\nindex 8eff75aab..855ca0cad 100644\n--- a/statsmodels/miscmodels/ordinal_model.py\n+++ b/statsmodels/miscmodels/ordinal_model.py\n@@ -132,6 +132,10 @@ class OrderedModel(GenericLikelihoodModel):\n         k_levels = None  # initialize\n         if not is_pandas:\n             if self.endog.ndim == 1:\n+                # Check for NaN values and raise an error if found\n+                if np.isnan(self.endog).any():\n+                    raise ValueError(\"missing values in endog are not supported for non-pandas input\")\n+                \n                 unique, index = np.unique(self.endog, return_inverse=True)\n                 self.endog = index\n                 labels = unique\n"
    },
    {
        "instance_id": "tqdm__tqdm-535",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 04b2961..6051fa0 100755\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -556,6 +556,12 @@ class tqdm(object):\n                     To be applied on the (grouped) data.\n                 **kwargs  : optional\n                     Transmitted to `df.apply()`.\n+                \n+                Notes\n+                -----\n+                If the `total` keyword is not provided by the user, it will be\n+                automatically calculated based on the DataFrame or Series dimensions.\n+                If provided by the user, it will override the calculated total.\n                 \"\"\"\n \n                 # Precompute total iterations\n@@ -571,6 +577,11 @@ class tqdm(object):\n                         total = df.size // df.shape[axis]\n \n                 # Init bar\n+                if 'total' in tkwargs:\n+                    user_total = tkwargs.pop('total')\n+                    if user_total is not None:\n+                        total = user_total\n+\n                 if deprecated_t[0] is not None:\n                     t = deprecated_t[0]\n                     deprecated_t[0] = None\n"
    },
    {
        "instance_id": "webpack__webpack-15454",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/lib/BannerPlugin.js b/lib/BannerPlugin.js\nindex 81b765831..b7d9a9788 100644\n--- a/lib/BannerPlugin.js\n+++ b/lib/BannerPlugin.js\n@@ -79,6 +79,9 @@ class BannerPlugin {\n \t\t);\n \n \t\tcompiler.hooks.compilation.tap(\"BannerPlugin\", compilation => {\n+\t\t\t// Create a cache-specific key for the plugin\n+\t\t\tconst cache = compilation.getCache(\"BannerPlugin\");\n+\n \t\t\tcompilation.hooks.processAssets.tap(\n \t\t\t\t{\n \t\t\t\t\tname: \"BannerPlugin\",\n@@ -95,6 +98,15 @@ class BannerPlugin {\n \t\t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t\t}\n \n+\t\t\t\t\t\t\t// Retrieve the cached version of the asset\n+\t\t\t\t\t\t\tconst cacheKey = `${file}`;\n+\t\t\t\t\t\t\tconst cachedBanner = cache.getItemCache(cacheKey);\n+\n+\t\t\t\t\t\t\t// Skip updating the asset if it hasn't changed\n+\t\t\t\t\t\t\tif (cachedBanner && cachedBanner.updated) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\n \t\t\t\t\t\t\tconst data = {\n \t\t\t\t\t\t\t\tchunk,\n \t\t\t\t\t\t\t\tfilename: file\n@@ -102,10 +114,12 @@ class BannerPlugin {\n \n \t\t\t\t\t\t\tconst comment = compilation.getPath(banner, data);\n \n+\t\t\t\t\t\t\t// Update the asset and save the banner to the cache\n \t\t\t\t\t\t\tcompilation.updateAsset(\n \t\t\t\t\t\t\t\tfile,\n \t\t\t\t\t\t\t\told => new ConcatSource(comment, \"\\n\", old)\n \t\t\t\t\t\t\t);\n+\t\t\t\t\t\t\tcache.storeItemCache(cacheKey, { updated: true });\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-7665",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/cli.js b/src/cli.js\nindex 67cf3f01..fbca49ba 100644\n--- a/src/cli.js\n+++ b/src/cli.js\n@@ -266,9 +266,15 @@ let args = (() => {\n       let args = []\n       let offset = i + 1\n \n-      // Parse args for current flag\n+      const shouldInclude = (elem, index) => index + 1 !== elem; // Example condition\n+\n+      // Parse args for current flag with enhanced logic\n       while (result['_'][offset] && !result['_'][offset].startsWith('-')) {\n-        args.push(result['_'][offset++])\n+        // Apply condition before adding to args\n+        if (shouldInclude(result['_'][offset], offset)) {\n+          args.push(result['_'][offset]);\n+        }\n+        offset++;\n       }\n \n       // Cleanup manually parsed flags + args\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-7588",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/integrations/webpack-5/webpack.config.js b/integrations/webpack-5/webpack.config.js\nindex 19bc0376..26e1829a 100644\n--- a/integrations/webpack-5/webpack.config.js\n+++ b/integrations/webpack-5/webpack.config.js\n@@ -6,7 +6,16 @@ module.exports = {\n     rules: [\n       {\n         test: /\\.css$/i,\n-        use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader'],\n+        use: [\n+          MiniCssExtractPlugin.loader,\n+          {\n+            loader: 'css-loader',\n+            options: { sourceMap: true }\n+          },\n+          {\n+            loader: 'postcss-loader',\n+            options: { sourceMap: true } // Explicitly enable source maps\n+          },\n       },\n     ],\n   },\ndiff --git a/src/cli.js b/src/cli.js\nindex 67cf3f01..cc748cfd 100644\n--- a/src/cli.js\n+++ b/src/cli.js\n@@ -348,10 +348,16 @@ function init() {\n         path.resolve(__dirname, '../stubs/defaultPostCssConfig.stub.js'),\n         'utf8'\n       )\n-\n-      fs.writeFileSync(postcssConfigLocation, stubFile, 'utf8')\n-\n-      messages.push(`Created PostCSS config file: ${path.basename(postcssConfigLocation)}`)\n+  \n+      // Add source map configuration to the default PostCSS config\n+      let configWithSourceMap = stubFile.replace(\n+        /modules: \\{/, \n+        `modules: {\\n    sourceMap: true,`\n+      );\n+      \n+      fs.writeFileSync(postcssConfigLocation, configWithSourceMap, 'utf8')\n+  \n+      messages.push(`Created PostCSS config file: ${path.basename(postcssConfigLocation)} with sourceMaps enabled`)\n     }\n   }\n \n"
    },
    {
        "instance_id": "webpack__webpack-14782",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/lib/sharing/ConsumeSharedRuntimeModule.js b/lib/sharing/ConsumeSharedRuntimeModule.js\nindex 9a868f4f7..e1c3ca8cf 100644\n--- a/lib/sharing/ConsumeSharedRuntimeModule.js\n+++ b/lib/sharing/ConsumeSharedRuntimeModule.js\n@@ -103,9 +103,10 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {\n \t\t\t\t]\n \t\t\t)};`,\n \t\t\t`var getInvalidSingletonVersionMessage = ${runtimeTemplate.basicFunction(\n-\t\t\t\t\"key, version, requiredVersion\",\n+\t\t\t\t\"key, version, requiredVersion, sources\",\n \t\t\t\t[\n-\t\t\t\t\t`return \"Unsatisfied version \" + version + \" of shared singleton module \" + key + \" (required \" + rangeToString(requiredVersion) + \")\"`\n+\t\t\t\t\t`var sourcesString = sources.map(function(src) { return src.version + \" (by \" + src.pkgName + \")\"; }).join(\", \");`,\n+\t\t\t\t\t`return \"Unsatisfied version \" + version + \" of shared singleton module \" + key + \" (required \" + rangeToString(requiredVersion) + \"). Detected versions: \" + sourcesString;`\n \t\t\t\t]\n \t\t\t)};`,\n \t\t\t`var getSingletonVersion = ${runtimeTemplate.basicFunction(\n@@ -121,8 +122,12 @@ class ConsumeSharedRuntimeModule extends RuntimeModule {\n \t\t\t\t\"scope, scopeName, key, requiredVersion\",\n \t\t\t\t[\n \t\t\t\t\t\"var version = findSingletonVersionKey(scope, key);\",\n-\t\t\t\t\t\"if (!satisfy(requiredVersion, version)) \" +\n-\t\t\t\t\t\t\"throw new Error(getInvalidSingletonVersionMessage(key, version, requiredVersion));\",\n+\t\t\t\t\t\"if (!satisfy(requiredVersion, version)) {\",\n+\t\t\t\t\t\"  var sources = Object.keys(scope[key]).map(function(ver) {\",\n+\t\t\t\t\t\"    return { version: ver, pkgName: scope[key][ver].pkgName };\",\n+\t\t\t\t\t\"  });\",\n+\t\t\t\t\t\"  throw new Error(getInvalidSingletonVersionMessage(key, version, requiredVersion, sources));\",\n+\t\t\t\t\t\"}\",\n \t\t\t\t\t\"return get(scope[key][version]);\"\n \t\t\t\t]\n \t\t\t)};`,\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-6469",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/cli.js b/src/cli.js\nindex daaea315..84691b22 100644\n--- a/src/cli.js\n+++ b/src/cli.js\n@@ -483,6 +483,13 @@ async function build() {\n       return {\n         postcssPlugin: 'tailwindcss',\n         Once(root, { result }) {\n+          root.walkRules(rule => {\n+            // Safeguard and remove unintended interpretations by escaping square brackets\n+            rule.selector = rule.selector.replace(/\\[(.*?)\\]/g, (_, content) => {\n+              return `\\\\[${content.replace(/[:.]/g, '\\\\$&')}\\\\]`;\n+            });\n+          });\n+    \n           tailwind(({ createContext }) => {\n             return () => {\n               return createContext(config, changedContent)\n@@ -491,7 +498,7 @@ async function build() {\n         },\n       }\n     }\n-\n+    \n     tailwindPlugin.postcss = true\n \n     let [beforePlugins, afterPlugins] = includePostCss ? await loadPostCssPlugins() : [[], []]\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-4260",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/jit/lib/generateRules.js b/src/jit/lib/generateRules.js\nindex 79b701ab..98a38ea9 100644\n--- a/src/jit/lib/generateRules.js\n+++ b/src/jit/lib/generateRules.js\n@@ -77,7 +77,11 @@ function applyImportant(matches) {\n       r.selector = updateAllClasses(r.selector, (className) => {\n         return `!${className}`\n       })\n-      r.walkDecls((d) => (d.important = true))\n+      r.walkDecls((d) => {\n+        if (!d.parent || d.parent.type !== 'rule' || !inKeyframes(d.parent)) {\n+          d.important = true\n+        }\n+      })\n     })\n     result.push([meta, container.nodes[0]])\n   }\n@@ -240,7 +244,7 @@ function* resolveMatches(candidate, context) {\n     matches = applyPrefix(matches, context)\n \n     if (important) {\n-      matches = applyImportant(matches, context)\n+      matches = applyImportant(matches)\n     }\n \n     for (let variant of variants) {\n@@ -283,13 +287,13 @@ function generateRules(candidates, context) {\n \n   return allRules.flat(1).map(([{ sort, layer, options }, rule]) => {\n     if (options.respectImportant) {\n-      if (context.tailwindConfig.important === true) {\n-        rule.walkDecls((d) => {\n-          if (d.parent.type === 'rule' && !inKeyframes(d.parent)) {\n-            d.important = true\n-          }\n-        })\n-      } else if (typeof context.tailwindConfig.important === 'string') {\n+      rule.walkDecls((d) => {\n+        if (!d.parent || d.parent.type !== 'rule' || !inKeyframes(d.parent)) {\n+          d.important = true\n+        }\n+      })\n+\n+      if (typeof context.tailwindConfig.important === 'string') {\n         let container = postcss.root({ nodes: [rule] })\n         container.walkRules((r) => {\n           if (inKeyframes(r)) {\ndiff --git a/src/lib/applyImportantConfiguration.js b/src/lib/applyImportantConfiguration.js\nindex 5c35759a..bcb9a783 100644\n--- a/src/lib/applyImportantConfiguration.js\n+++ b/src/lib/applyImportantConfiguration.js\n@@ -7,12 +7,12 @@ export default function applyImportantConfiguration(_config) {\n         return\n       }\n \n+      rule.walkDecls((decl) => (decl.important = true))\n+\n       if (typeof important === 'string') {\n         rule.selectors = rule.selectors.map((selector) => {\n-          return `${rule.__tailwind.important} ${selector}`\n+          return `${important} ${selector}`\n         })\n-      } else {\n-        rule.walkDecls((decl) => (decl.important = true))\n       }\n     })\n   }\n"
    },
    {
        "instance_id": "prettier__prettier-12177",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/language-js/comments.js b/src/language-js/comments.js\nindex 8cc724148..80d742703 100644\n--- a/src/language-js/comments.js\n+++ b/src/language-js/comments.js\n@@ -946,6 +946,15 @@ function getCommentChildNodes(node, options) {\n   ) {\n     return [...(node.decorators || []), node.key, node.value.body];\n   }\n+\n+  // Include comments after default labels in switch statements\n+  if (\n+    options.parser && \n+    node.type === \"SwitchCase\" && \n+    node.test === null\n+  ) {\n+    return [...(node.consequent || [])];\n+  }\n }\n \n /**\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-8608",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/lib/setupContextUtils.js b/src/lib/setupContextUtils.js\nindex dc7643da..7c722727 100644\n--- a/src/lib/setupContextUtils.js\n+++ b/src/lib/setupContextUtils.js\n@@ -178,6 +178,11 @@ export function isValidVariantFormatString(format) {\n }\n \n export function parseVariant(variant) {\n+  if (typeof variant !== 'string') {\n+    console.warn('parseVariant: Expected variant to be a string, but received:', variant)\n+    variant = '' // Fallback to an empty string or handle according to the use case\n+  }\n+\n   variant = variant\n     .replace(/\\n+/g, '')\n     .replace(/\\s{1,}/g, ' ')\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-12324",
        "model_name_or_path": "claude-3-5-sonnet-20240620",
        "model_patch": "diff --git a/src/lib/defaultExtractor.js b/src/lib/defaultExtractor.js\nindex 0751c1ac..854f7ec6 100644\n--- a/src/lib/defaultExtractor.js\n+++ b/src/lib/defaultExtractor.js\n@@ -39,15 +39,15 @@ function* buildRegExps(context) {\n \n     // Utilities\n     regex.pattern([\n-      // Utility Name / Group Name\n+      // Allow negative or optional beginning\n       /-?(?:\\w+)/,\n \n       // Normal/Arbitrary values\n       regex.optional(\n         regex.any([\n           regex.pattern([\n-            // Arbitrary values\n-            /-(?:\\w+-)*\\[[^\\s:]+\\]/,\n+            // Arbitrary values with potential negative support\n+            /-?(?:\\w+-)?\\[([^\\s:]+)\\]/,\n \n             // Not immediately followed by an `{[(`\n             /(?![{([]])/,\n"
    }
]