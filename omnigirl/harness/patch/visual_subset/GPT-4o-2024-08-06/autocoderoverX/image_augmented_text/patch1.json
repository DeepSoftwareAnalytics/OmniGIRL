[
    {
        "instance_id": "tailwindlabs__tailwindcss-7588",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/corePlugins.js b/src/corePlugins.js\nindex e52f9d6c..04330219 100644\n--- a/src/corePlugins.js\n+++ b/src/corePlugins.js\n@@ -242,7 +242,8 @@ let cssBackdropFilterValue = [\n export let corePlugins = {\n   preflight: ({ addBase }) => {\n     let preflightStyles = postcss.parse(\n-      fs.readFileSync(path.join(__dirname, './css/preflight.css'), 'utf8')\n+      fs.readFileSync(path.join(__dirname, './css/preflight.css'), 'utf8'),\n+      { from: path.join(__dirname, './css/preflight.css') }\n     )\n \n     addBase([\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-12324",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/util/dataTypes.js b/src/util/dataTypes.js\nindex d4fef2e4..b288bcad 100644\n--- a/src/util/dataTypes.js\n+++ b/src/util/dataTypes.js\n@@ -167,7 +167,12 @@ function normalizeMathOperatorSpacing(value) {\n         ['+', '-', '*', '/'].includes(char) &&\n         !['(', '+', '-', '*', '/'].includes(lastChar())\n       ) {\n-        result += ` ${char} `\n+        // New condition: Skip spaces around `-` if it's part of a negative number\n+        if (char === '-' && /\\d/.test(match[i + 1]) && ['(', ','].includes(lastChar())) {\n+          result += char; // Preserve the negative number without spaces\n+        } else {\n+          result += ` ${char} `\n+        }\n       } else {\n         result += char\n       }\n"
    },
    {
        "instance_id": "babel__babel-15134",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/packages/babel-parser/src/parser/statement.ts b/packages/babel-parser/src/parser/statement.ts\nindex 60e01e8725..beaa70a253 100644\n--- a/packages/babel-parser/src/parser/statement.ts\n+++ b/packages/babel-parser/src/parser/statement.ts\n@@ -854,11 +854,13 @@ export default abstract class StatementParser extends ExpressionParser {\n         startsWithAsync &&\n         init.type === \"Identifier\"\n       ) {\n-        // This catches the case where the `async` in `for (async of` was\n-        // parsed as an identifier. If it was parsed as the start of an async\n-        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n-        // further down will raise a more appropriate error.\n-        this.raise(Errors.ForOfAsync, { at: init });\n+        // Check explicitly if \"await\" is used as a standalone identifier outside\n+        // of an async context; if it is, skip raising this error.\n+        if (init.name === \"await\" && !this.scope.inFunction) {\n+          // Allow `for (await of ...)` when \"await\" is used as an identifier.\n+        } else {\n+          this.raise(Errors.ForOfAsync, { at: init });\n+        }\n       }\n     }\n     if (isForOf || this.match(tt._in)) {\n@@ -1329,7 +1331,8 @@ export default abstract class StatementParser extends ExpressionParser {\n       (!isForIn ||\n         this.state.strict ||\n         init.kind !== \"var\" ||\n-        init.declarations[0].id.type !== \"Identifier\")\n+        (init.declarations[0].id.type !== \"Identifier\" &&\n+         init.declarations[0].id.name !== \"await\")) // Allow 'await' as an identifier\n     ) {\n       this.raise(Errors.ForInOfLoopInitializer, {\n         at: init,\n"
    },
    {
        "instance_id": "statsmodels__statsmodels-7757",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/statsmodels/miscmodels/ordinal_model.py b/statsmodels/miscmodels/ordinal_model.py\nindex 8eff75aab..c06866a7f 100644\n--- a/statsmodels/miscmodels/ordinal_model.py\n+++ b/statsmodels/miscmodels/ordinal_model.py\n@@ -127,6 +127,8 @@ class OrderedModel(GenericLikelihoodModel):\n         self.offset = offset\n \n         endog, labels, is_pandas = self._check_inputs(endog, exog)\n+        if not is_pandas and np.isnan(endog).any():\n+            raise ValueError(\"missing values in non-categorical endog are not supported\")\n \n         super(OrderedModel, self).__init__(endog, exog, **kwds)\n         k_levels = None  # initialize\n@@ -212,6 +214,10 @@ class OrderedModel(GenericLikelihoodModel):\n                 endog.name = endog_name\n                 is_pandas = True\n \n+        if isinstance(endog, np.ndarray):\n+            if np.isnan(endog).any():\n+                raise ValueError(\"missing values in endog are not supported\")\n+        \n         return endog, labels, is_pandas\n \n     def _initialize_labels(self, labels, k_levels=None):\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-10943",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/lib/expandApplyAtRules.js b/src/lib/expandApplyAtRules.js\nindex c6d53d80..de3d23e7 100644\n--- a/src/lib/expandApplyAtRules.js\n+++ b/src/lib/expandApplyAtRules.js\n@@ -402,20 +402,22 @@ function processApply(root, context, localCache) {\n \n     let [applyCandidates, important] = extractApplyCandidates(apply.params)\n \n-    if (apply.parent.type === 'atrule') {\n-      if (apply.parent.name === 'screen') {\n-        let screenType = apply.parent.params\n-\n-        throw apply.error(\n-          `@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply ${applyCandidates\n-            .map((c) => `${screenType}:${c}`)\n-            .join(' ')} instead.`\n-        )\n-      }\n-\n+    // Check if nested at-rules are specifically unsupported or require alternative handling\n+    if (apply.parent.type === 'atrule' && !['media', 'supports'].includes(apply.parent.name)) {\n+      // Create a mapping for more understandable feedback and guidance\n+      const nestedRulesMapping = {\n+        'screen': 'media'\n+      };\n+      let ruleType = nestedRulesMapping[apply.parent.name] || apply.parent.name;\n+      \n+      // Provide tailored instructions for replacement or adjustment\n       throw apply.error(\n-        `@apply is not supported within nested at-rules like @${apply.parent.name}. You can fix this by un-nesting @${apply.parent.name}.`\n-      )\n+        `@apply is not supported within nested at-rules like @${apply.parent.name}. ` +\n+        `Consider restructuring or nesting them differently. ` +\n+        `For example, use @${ruleType} with: @apply ${applyCandidates\n+          .map((c) => `${ruleType}:${c}`)\n+          .join(' ')}`\n+      );\n     }\n \n     for (let applyCandidate of applyCandidates) {\n@@ -424,10 +426,15 @@ function processApply(root, context, localCache) {\n         throw apply.error(`@apply should not be used with the '${applyCandidate}' utility`)\n       }\n \n-      if (!applyClassCache.has(applyCandidate)) {\n+      const applyCandidateExists = applyClassCache.has(applyCandidate);\n+  \n+      // Improved error checking with suggestion if class not found\n+      if (!applyCandidateExists) {\n+        console.warn(`Warning: The class \\`${applyCandidate}\\` may not exist or be defined in an unexpected location.`);\n+        // Allow user to check or rectify placement within @layer or configuration settings\n         throw apply.error(\n-          `The \\`${applyCandidate}\\` class does not exist. If \\`${applyCandidate}\\` is a custom class, make sure it is defined within a \\`@layer\\` directive.`\n-        )\n+          `The \\`${applyCandidate}\\` class does not exist. Verify if this class needs to be defined within a \\`@layer\\` directive or if Tailwind's configuration changes need accommodation.`\n+        );\n       }\n \n       let rules = applyClassCache.get(applyCandidate)\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-7665",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/util/color.js b/src/util/color.js\nindex aa21d668..89cca803 100644\n--- a/src/util/color.js\n+++ b/src/util/color.js\n@@ -60,6 +60,17 @@ export function parseColor(value) {\n     }\n   }\n \n+  // Handle numeric triple for CSS variables\n+  let varMatch = value.match(/var\\((--[\\w-]+)\\)/g)\n+\n+  if (varMatch && varMatch.length === 3) {\n+    return {\n+      mode: 'rgb',\n+      color: varMatch,\n+      alpha: undefined,\n+    }\n+  }\n+\n   return null\n }\n \ndiff --git a/src/util/withAlphaVariable.js b/src/util/withAlphaVariable.js\nindex 00ed2be9..a2bb3771 100644\n--- a/src/util/withAlphaVariable.js\n+++ b/src/util/withAlphaVariable.js\n@@ -11,6 +11,11 @@ export function withAlphaValue(color, alphaValue, defaultValue) {\n     return defaultValue\n   }\n \n+  // Handle numeric triple CSS variables for RGB/HSL\n+  if (parsed.color.every((component) => component.startsWith('var('))) {\n+    return `${parsed.mode}(${parsed.color.join(',')} / ${alphaValue})`\n+  }\n+\n   return formatColor({ ...parsed, alpha: alphaValue })\n }\n \n@@ -38,6 +43,15 @@ export default function withAlphaVariable({ color, property, variable }) {\n     return Object.fromEntries(properties.map((p) => [p, color]))\n   }\n \n+  // Handle numeric triple CSS variables for RGB/HSL\n+  if (parsed.color.every((component) => component.startsWith('var('))) {\n+    let colorExpression = `${parsed.mode}(var(${parsed.color.join(',')}))`\n+    return {\n+      [variable]: '1',\n+      ...Object.fromEntries(properties.map((p) => [p, colorExpression.replace('var(', `var(${variable}, `)]))\n+    }\n+  }\n+\n   return {\n     [variable]: '1',\n     ...Object.fromEntries(\n"
    },
    {
        "instance_id": "tqdm__tqdm-535",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 04b2961..97ab7c3 100755\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -575,7 +575,8 @@ class tqdm(object):\n                     t = deprecated_t[0]\n                     deprecated_t[0] = None\n                 else:\n-                    t = tclass(*targs, total=total, **tkwargs)\n+                    tkwargs.setdefault(\"total\", total)\n+                    t = tclass(*targs, **tkwargs)\n \n                 if len(args) > 0:\n                     # *args intentionally not supported (see #244, #299)\n@@ -739,6 +740,10 @@ class tqdm(object):\n             self.pos = self._get_free_pos(self)\n             self._instances.remove(self)\n             self.n = initial\n+\n+            # Ensure total is set, even when disabled\n+            # Default to 0 if both iterable and total are None\n+            self.total = total if total is not None else (len(iterable) if iterable is not None else 0)\n             return\n \n         if kwargs:\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-10212",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/util/pluginUtils.js b/src/util/pluginUtils.js\nindex e347f404..37710981 100644\n--- a/src/util/pluginUtils.js\n+++ b/src/util/pluginUtils.js\n@@ -113,10 +113,9 @@ function splitUtilityModifier(modifier) {\n \n   let arbitrary = isArbitraryValue(modifier)\n \n-  // The modifier could be of the form `[foo]/[bar]`\n-  // We want to handle this case properly\n-  // without affecting `[foo/bar]`\n-  if (arbitrary && !modifier.includes(']/[')) {\n+  // Handle arbitrary values without affecting special cases like `[foo]/[bar]`\n+  if (arbitrary) {\n+    // Allow modifiers like `[display:inherit]` which may have inner brackets but are still valid \n     return [modifier, undefined]\n   }\n \n"
    },
    {
        "instance_id": "prettier__prettier-12177",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/language-js/print/statement.js b/src/language-js/print/statement.js\nindex b8575744f..979f5ba50 100644\n--- a/src/language-js/print/statement.js\n+++ b/src/language-js/print/statement.js\n@@ -161,7 +161,18 @@ function printBody(path, options, print) {\n }\n \n function printSwitchCaseConsequent(path, options, print) {\n-  return printStatementSequence(path, options, print, \"consequent\");\n+  const parts = [];\n+\n+  // Process comments preceding inline `case` or `default` blocks\n+  const node = path.getValue();\n+  if (hasComment(node, CommentCheckFlags.Leading)) {\n+    parts.push(print([], { leadingComments: true }));\n+  }\n+\n+  // Use the existing printStatementSequence to print the body\n+  parts.push(printStatementSequence(path, options, print, \"consequent\"));\n+\n+  return parts;\n }\n \n const isClassProperty = ({ type }) =>\ndiff --git a/src/main/comments.js b/src/main/comments.js\nindex 77d961586..4cba678a2 100644\n--- a/src/main/comments.js\n+++ b/src/main/comments.js\n@@ -276,7 +276,12 @@ function attach(comments, ast, text, options) {\n         }\n         tiesToBreak.push(context);\n       } else if (precedingNode) {\n-        addTrailingComment(precedingNode, comment);\n+        // Ensure comments on `default` and `case` are tied to their preceding statement\n+        if (precedingNode.type === \"SwitchCase\" || precedingNode.type === \"SwitchDefault\") {\n+          addTrailingComment(precedingNode, comment);\n+        } else {\n+          addTrailingComment(precedingNode, comment);\n+        }\n       } else if (followingNode) {\n         addLeadingComment(followingNode, comment);\n       } else if (enclosingNode) {\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-7102",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/corePlugins.js b/src/corePlugins.js\nindex ced2be21..4c2742ed 100644\n--- a/src/corePlugins.js\n+++ b/src/corePlugins.js\n@@ -247,7 +247,15 @@ export let corePlugins = {\n       fs.readFileSync(path.join(__dirname, './css/preflight.css'), 'utf8')\n     )\n \n+    // Add a base style for tables with border-spacing set to 0 to override default browser styles.\n     addBase([\n+      {\n+        'table': {\n+          'border-spacing': '0',\n+          'border-collapse': 'collapse', // Optional: For consistent table rendering with collapsed borders.\n+        },\n+      },\n+    ]);\n       postcss.comment({\n         text: `! tailwindcss v${tailwindVersion} | MIT License | https://tailwindcss.com`,\n       }),\n"
    },
    {
        "instance_id": "webpack__webpack-15454",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/lib/BannerPlugin.js b/lib/BannerPlugin.js\nindex 81b765831..bdfb1dfd9 100644\n--- a/lib/BannerPlugin.js\n+++ b/lib/BannerPlugin.js\n@@ -85,6 +85,8 @@ class BannerPlugin {\n \t\t\t\t\tstage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n \t\t\t\t},\n \t\t\t\t() => {\n+\t\t\t\t\tconst modifiedFiles = compiler.modifiedFiles || new Set();\n+\n \t\t\t\t\tfor (const chunk of compilation.chunks) {\n \t\t\t\t\t\tif (options.entryOnly && !chunk.canBeInitial()) {\n \t\t\t\t\t\t\tcontinue;\n@@ -95,6 +97,11 @@ class BannerPlugin {\n \t\t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t\t}\n \n+\t\t\t\t\t\t\t// Check if the file was modified.\n+\t\t\t\t\t\t\tif (!modifiedFiles.has(file)) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\n \t\t\t\t\t\t\tconst data = {\n \t\t\t\t\t\t\t\tchunk,\n \t\t\t\t\t\t\t\tfilename: file\n"
    },
    {
        "instance_id": "iamkun__dayjs-1307",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 97f2406..26033c9 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -41,7 +41,13 @@ export default (o, c, d) => {\n   const makeFormatParts = (timestamp, timezone, options = {}) => {\n     const date = new Date(timestamp)\n     const dtf = getDateTimeFormat(timezone, options)\n-    return dtf.formatToParts(date)\n+    const parts = dtf.formatToParts(date)\n+\n+    // Validate and ensure proper parts are returned\n+    if (!parts || parts.length === 0) {\n+      throw new Error(`Failed to format parts for timezone: ${timezone}`);\n+    }\n+    return parts\n   }\n \n   const tzOffset = (timestamp, timezone) => {\n@@ -55,12 +61,19 @@ export default (o, c, d) => {\n         filled[pos] = parseInt(value, 10)\n       }\n     }\n-    const hour = filled[3]\n-    // Workaround for the same behavior in different node version\n+    const [year, month, day, hour, minute, second] = [\n+      filled[0],\n+      filled[1]?.toString().padStart(2, '0'),\n+      filled[2]?.toString().padStart(2, '0'),\n+      filled[3],\n+      filled[4]?.toString().padStart(2, '0'),\n+      filled[5]?.toString().padStart(2, '0'),\n+    ];\n+    // Workaround for the same behavior in different node versions\n     // https://github.com/nodejs/node/issues/33027\n     /* istanbul ignore next */\n     const fixedHour = hour === 24 ? 0 : hour\n-    const utcString = `${filled[0]}-${filled[1]}-${filled[2]} ${fixedHour}:${filled[4]}:${filled[5]}:000`\n+    const utcString = `${year}-${month}-${day} ${fixedHour}:${minute}:${second}:000`\n     const utcTs = d.utc(utcString).valueOf()\n     let asTS = +timestamp\n     const over = asTS % 1000\n"
    },
    {
        "instance_id": "webpack__webpack-14782",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/lib/sharing/ConsumeSharedModule.js b/lib/sharing/ConsumeSharedModule.js\nindex cb6881331..6dc917698 100644\n--- a/lib/sharing/ConsumeSharedModule.js\n+++ b/lib/sharing/ConsumeSharedModule.js\n@@ -215,6 +215,19 @@ class ConsumeSharedModule extends Module {\n \t\t\tfn += \"Fallback\";\n \t\t\targs.push(fallbackCode);\n \t\t}\n+\n+\t\t// Enhanced error reporting logic\n+\t\tif (strictVersion) {\n+\t\t\tconst mismatchedDependencies = moduleGraph.getMismatchedDependencies(shareKey, requiredVersion);\n+\t\t\tif (mismatchedDependencies.length > 0) {\n+\t\t\t\tconst detailedErrors = mismatchedDependencies.map(dep => {\n+\t\t\t\t\treturn `${dep.packageName} (declared by ${dep.declaredBy}, current: ${dep.currentVersion}, required: ${dep.requiredVersion})`;\n+\t\t\t\t});\n+\t\t\t\tconst errorMsg = `Unsatisfied versions detected for ${shareKey}:\\n` + detailedErrors.join(\"\\n\");\n+\t\t\t\tthrow new Error(errorMsg);\n+\t\t\t}\n+\t\t}\n+\n \t\tconst code = runtimeTemplate.returningFunction(`${fn}(${args.join(\", \")})`);\n \t\tconst sources = new Map();\n \t\tsources.set(\"consume-shared\", new RawSource(code));\ndiff --git a/lib/sharing/ConsumeSharedPlugin.js b/lib/sharing/ConsumeSharedPlugin.js\nindex a1a3c855e..46a17659d 100644\n--- a/lib/sharing/ConsumeSharedPlugin.js\n+++ b/lib/sharing/ConsumeSharedPlugin.js\n@@ -80,7 +80,8 @@ class ConsumeSharedPlugin {\n \t\t\t\t\t\t\t\tstrictVersion: true,\n \t\t\t\t\t\t\t\tpackageName: undefined,\n \t\t\t\t\t\t\t\tsingleton: false,\n-\t\t\t\t\t\t\t\teager: false\n+\t\t\t\t\t\t\t\teager: false,\n+\t\t\t\t\t\t\t\tdeclaredBy: item.declaredBy || \"unknown\"\n \t\t\t\t\t\t  };\n \t\t\t\treturn result;\n \t\t\t},\n@@ -98,7 +99,8 @@ class ConsumeSharedPlugin {\n \t\t\t\t\t\t: item.import !== false && !item.singleton,\n \t\t\t\tpackageName: item.packageName,\n \t\t\t\tsingleton: !!item.singleton,\n-\t\t\t\teager: !!item.eager\n+\t\t\t\teager: !!item.eager,\n+\t\t\t\tdeclaredBy: item.declaredBy || \"unknown\"\n \t\t\t})\n \t\t);\n \t}\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-6469",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/lib/expandTailwindAtRules.js b/src/lib/expandTailwindAtRules.js\nindex 4b1c6270..2fdc3376 100644\n--- a/src/lib/expandTailwindAtRules.js\n+++ b/src/lib/expandTailwindAtRules.js\n@@ -82,7 +82,15 @@ function getClassCandidates(content, extractor, candidates, seen) {\n         candidates.add(match)\n       }\n     } else {\n-      let extractorMatches = extractor(line).filter((s) => s !== '!*')\n+      let extractorMatches = extractor(line)\n+        .filter((s) => s !== '!*')\n+        .map((s) => {\n+          // Ensure bracketed classes are parsed correctly\n+          if (s.startsWith('[') && s.endsWith(']')) {\n+            return s.replace(/:/g, '\\\\:')\n+          }\n+          return s\n+        })\n       let lineMatchesSet = new Set(extractorMatches)\n \n       for (let match of lineMatchesSet) {\ndiff --git a/src/lib/generateRules.js b/src/lib/generateRules.js\nindex 521b3502..97a672b9 100644\n--- a/src/lib/generateRules.js\n+++ b/src/lib/generateRules.js\n@@ -368,7 +368,9 @@ function* resolveMatches(candidate, context) {\n \n     // Only keep the result of the very first plugin if we are dealing with\n     // arbitrary values, to protect against ambiguity.\n-    if (isArbitraryValue(modifier) && matches.length > 1) {\n+    if (isArbitraryValue(modifier)) {\n+      matches = matches.filter((matchGroup) => matchGroup.length > 0)\n+      if (matches.length > 1) {\n       let typesPerPlugin = matches.map((match) => new Set([...(typesByMatches.get(match) ?? [])]))\n \n       // Remove duplicates, so that we can detect proper unique types for each plugin.\n"
    },
    {
        "instance_id": "tailwindlabs__tailwindcss-8608",
        "model_name_or_path": "gpt-4o-2024-08-06",
        "model_patch": "diff --git a/src/lib/setupContextUtils.js b/src/lib/setupContextUtils.js\nindex dc7643da..018356dc 100644\n--- a/src/lib/setupContextUtils.js\n+++ b/src/lib/setupContextUtils.js\n@@ -446,44 +446,51 @@ function buildPluginApi(tailwindConfig, context, { variantList, variantMap, offs\n       }\n     },\n     addVariant(variantName, variantFunctions, options = {}) {\n-      variantFunctions = [].concat(variantFunctions).map((variantFunction) => {\n-        if (typeof variantFunction !== 'string') {\n-          // Safelist public API functions\n-          return (api) => {\n-            let { args, modifySelectors, container, separator, wrap, format } = api\n-            let result = variantFunction(\n-              Object.assign(\n-                { modifySelectors, container, separator },\n-                variantFunction[MATCH_VARIANT] && { args, wrap, format }\n-              )\n-            )\n-\n-            if (typeof result === 'string' && !isValidVariantFormatString(result)) {\n-              throw new Error(\n-                `Your custom variant \\`${variantName}\\` has an invalid format string. Make sure it's an at-rule or contains a \\`&\\` placeholder.`\n-              )\n+        variantFunctions = [].concat(variantFunctions).map((variantFunction) => {\n+            // Check and convert non-string variantFunctions to string or handle as needed\n+            if (typeof variantFunction !== 'string') {\n+                // Logging the non-string input for debugging purposes\n+                console.warn(`Warning: Non-string variant function passed for '${variantName}'. Consider reviewing the function input.`);\n+\n+                // Safelist public API functions\n+                return (api) => {\n+                    let { args, modifySelectors, container, separator, wrap, format } = api\n+                    let result = variantFunction(\n+                        Object.assign(\n+                            { modifySelectors, container, separator },\n+                            variantFunction[MATCH_VARIANT] && { args, wrap, format }\n+                        )\n+                    )\n+\n+                    if (typeof result === 'string' && !isValidVariantFormatString(result)) {\n+                        throw new Error(\n+                            `Your custom variant \\`${variantName}\\` has an invalid format string. Make sure it's an at-rule or contains a \\`&\\` placeholder.`\n+                        )\n+                    }\n+\n+                    if (Array.isArray(result)) {\n+                        return result.map((variant) => parseVariant(variant))\n+                    }\n+\n+                    // result may be undefined with legacy variants that use APIs like `modifySelectors`\n+                    return result && parseVariant(result)(api)\n+                }\n             }\n \n-            if (Array.isArray(result)) {\n-              return result.map((variant) => parseVariant(variant))\n-            }\n-\n-            // result may be undefined with legacy variants that use APIs like `modifySelectors`\n-            return result && parseVariant(result)(api)\n-          }\n-        }\n+            // Ensuring the variantFunction is coercible to a string if it's not already\n+            const variantString = typeof variantFunction === 'string' ? variantFunction : String(variantFunction);\n \n-        if (!isValidVariantFormatString(variantFunction)) {\n-          throw new Error(\n-            `Your custom variant \\`${variantName}\\` has an invalid format string. Make sure it's an at-rule or contains a \\`&\\` placeholder.`\n-          )\n-        }\n+            if (!isValidVariantFormatString(variantString)) {\n+                throw new Error(\n+                    `Your custom variant \\`${variantName}\\` has an invalid format string. Make sure it's an at-rule or contains a \\`&\\` placeholder.`\n+                )\n+            }\n \n-        return parseVariant(variantFunction)\n-      })\n+            return parseVariant(variantString)\n+        })\n \n-      insertInto(variantList, variantName, options)\n-      variantMap.set(variantName, variantFunctions)\n+        insertInto(variantList, variantName, options)\n+        variantMap.set(variantName, variantFunctions)\n     },\n   }\n \n"
    }
]