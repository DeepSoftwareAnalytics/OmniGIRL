{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-10212", "model_patch": "diff --git a/src/util/escapeClassName.js b/src/util/escapeClassName.js\nindex cb5924a..d9e4a2e 100644\n--- a/src/util/escapeClassName.js\n+++ b/src/util/escapeClassName.js\n@@ -1,8 +1,9 @@\n+\n import parser from 'postcss-selector-parser'\n import escapeCommas from './escapeCommas'\n \n export default function escapeClassName(className) {\n   let node = parser.className()\n-  node.value = className\n+  node.value = className.replace(/[\\[\\]]/g, '\\\\$&')\n   return escapeCommas(node?.raws?.value ?? node.value)\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-11111", "model_patch": "diff --git a/src/util/pseudoElements.js b/src/util/pseudoElements.js\nindex 9f0e54c..4d1e4b4 100644\n--- a/src/util/pseudoElements.js\n+++ b/src/util/pseudoElements.js\n@@ -146,7 +146,7 @@ function isPseudoElement(node) {\n  * @returns {boolean}\n  */\n function isMovablePseudoElement(node) {\n-  return isPseudoElement(node) && propertiesForPseudo(node).includes('terminal')\n+  return isPseudoElement(node) && (node.value === '::marker' || propertiesForPseudo(node).includes('terminal'))\n }\n \n /**\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-12324", "model_patch": "diff --git a/src/util/negateValue.js b/src/util/negateValue.js\nindex b1cdf78..9e1783f 100644\n--- a/src/util/negateValue.js\n+++ b/src/util/negateValue.js\n@@ -18,7 +18,7 @@ export default function negateValue(value) {\n \n   for (const fn of numericFunctions) {\n     if (value.includes(`${fn}(`)) {\n-      return `calc(${value} * -1)`\n+      return `calc(-1 * ${value})`\n     }\n   }\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-6469", "model_patch": "diff --git a/src/util/isValidArbitraryValue.js b/src/util/isValidArbitraryValue.js\nindex f2b10b5..7a0b04a 100644\n--- a/src/util/isValidArbitraryValue.js\n+++ b/src/util/isValidArbitraryValue.js\n@@ -52,7 +52,7 @@ export default function isValidArbitraryValue(value) {\n   }\n \n   // If there is still something on the stack, it is also unbalanced\n-  if (stack.length > 0) {\n+  if (stack.length > 0 || inQuotes) {\n     return false\n   }\n \n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7102", "model_patch": "diff --git a/src/util/resolveConfig.js b/src/util/resolveConfig.js\nindex ad9c225..beb8999 100644\n--- a/src/util/resolveConfig.js\n+++ b/src/util/resolveConfig.js\n@@ -251,6 +251,13 @@ export default function resolveConfig(configs) {\n       important: false,\n       separator: ':',\n       variantOrder: defaultConfig.variantOrder,\n+      theme: {\n+        extend: {\n+          tableLayout: {\n+            borderSpacing: '0', // Set default border-spacing to 0\n+          },\n+        },\n+      },\n     },\n   ]\n \n@@ -266,4 +273,4 @@ export default function resolveConfig(configs) {\n       ...allConfigs\n     )\n   )\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7789", "model_patch": "diff --git a/src/processTailwindFeatures.js b/src/processTailwindFeatures.js\nindex 952e17a..2b5c38d 100644\n--- a/src/processTailwindFeatures.js\n+++ b/src/processTailwindFeatures.js\n@@ -15,6 +15,9 @@ export default function processTailwindFeatures(setupContext) {\n   return function (root, result) {\n     let { tailwindDirectives, applyDirectives } = normalizeTailwindDirectives(root)\n \n+    // Filter out comments to prevent JIT from parsing them\n+    root.walkComments(comment => comment.remove())\n+\n     detectNesting()(root, result)\n \n     // Partition apply rules that are found in the css\n@@ -55,4 +58,4 @@ export default function processTailwindFeatures(setupContext) {\n     collapseAdjacentRules(context)(root, result)\n     collapseDuplicateDeclarations(context)(root, result)\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-8608", "model_patch": "diff --git a/src/util/pluginUtils.js b/src/util/pluginUtils.js\nindex 61a4018..9fbc420 100644\n--- a/src/util/pluginUtils.js\n+++ b/src/util/pluginUtils.js\n@@ -102,7 +102,7 @@ export function parseColorFormat(value) {\n     return ({ opacityValue = 1 }) => oldValue.replace('<alpha-value>', opacityValue)\n   }\n \n-  return value\n+  return typeof value === 'string' ? value : () => value\n }\n \n export function asColor(modifier, options = {}, { tailwindConfig = {} } = {}) {\n@@ -201,4 +201,4 @@ export function coerceValue(types, modifier, options, tailwindConfig) {\n   }\n \n   return []\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-2532", "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 832fb4a..b64d58b 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -43,7 +43,7 @@ export default (o, c, d) => {\n   }\n \n   const tzOffset = (timestamp, timezone) => {\n-    const formatResult = makeFormatParts(timestamp, timezone)\n+    const formatResult = makeFormatParts(timestamp, timezone, { timeZone: timezone })\n     const filled = []\n     for (let i = 0; i < formatResult.length; i += 1) {\n       const { type, value } = formatResult[i]\n@@ -147,4 +147,4 @@ export default (o, c, d) => {\n   d.tz.setDefault = function (timezone) {\n     defaultTimezone = timezone\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tqdm__tqdm-535", "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 26f9ce8..d9bc6b0 100644\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -739,6 +739,7 @@ class tqdm(object):\n             self.pos = self._get_free_pos(self)\n             self._instances.remove(self)\n             self.n = initial\n+            self.total = total  # Ensure total is set even when disabled\n             return\n \n         if kwargs:\n"}
{"model_name_or_path": "agentless", "instance_id": "statsmodels__statsmodels-7757", "model_patch": "diff --git a/statsmodels/miscmodels/ordinal_model.py b/statsmodels/miscmodels/ordinal_model.py\nindex 91fc8bc..76c5de4 100644\n--- a/statsmodels/miscmodels/ordinal_model.py\n+++ b/statsmodels/miscmodels/ordinal_model.py\n@@ -212,6 +212,8 @@ class OrderedModel(GenericLikelihoodModel):\n                 endog.name = endog_name\n                 is_pandas = True\n \n+        if np.any(np.isnan(endog)):\n+            raise ValueError(\"missing values in endog are not supported\")\n         return endog, labels, is_pandas\n \n     def _initialize_labels(self, labels, k_levels=None):\n"}
