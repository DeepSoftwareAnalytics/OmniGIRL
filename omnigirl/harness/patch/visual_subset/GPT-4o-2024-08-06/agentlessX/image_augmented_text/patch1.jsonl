{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-10212", "model_patch": "diff --git a/src/util/isSyntacticallyValidPropertyValue.js b/src/util/isSyntacticallyValidPropertyValue.js\nindex ff00074..6c8ef99 100644\n--- a/src/util/isSyntacticallyValidPropertyValue.js\n+++ b/src/util/isSyntacticallyValidPropertyValue.js\n@@ -18,6 +18,7 @@ let quotes = new Set(['\"', \"'\", '`'])\n export default function isSyntacticallyValidPropertyValue(value) {\n   let stack = []\n   let inQuotes = false\n+  let inArbitraryClass = false\n \n   for (let i = 0; i < value.length; i++) {\n     let char = value[i]\n@@ -34,6 +35,18 @@ export default function isSyntacticallyValidPropertyValue(value) {\n     if (inQuotes) continue\n     if (value[i - 1] === '\\\\') continue // Escaped\n \n+    if (char === '[' && !inArbitraryClass) {\n+      inArbitraryClass = true\n+      continue\n+    }\n+\n+    if (char === ']' && inArbitraryClass) {\n+      inArbitraryClass = false\n+      continue\n+    }\n+\n+    if (inArbitraryClass) continue\n+\n     if (matchingBrackets.has(char)) {\n       stack.push(char)\n     } else if (inverseMatchingBrackets.has(char)) {\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7789", "model_patch": "diff --git a/src/util/parseObjectStyles.js b/src/util/parseObjectStyles.js\nindex cb54787..f2d0b59 100644\n--- a/src/util/parseObjectStyles.js\n+++ b/src/util/parseObjectStyles.js\n@@ -8,11 +8,13 @@ export default function parseObjectStyles(styles) {\n   }\n \n   return styles.flatMap((style) => {\n+    // Filter out comments before processing\n+    const filteredStyle = style.replace(/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/g, '');\n     return postcss([\n       postcssNested({\n         bubble: ['screen'],\n       }),\n-    ]).process(style, {\n+    ]).process(filteredStyle, {\n       parser: postcssJs,\n     }).root.nodes\n   })\n"}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-1307", "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 97f2406..e7aa9d2 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -15,22 +15,18 @@ const dtfCache = {}\n const getDateTimeFormat = (timezone, options = {}) => {\n   const timeZoneName = options.timeZoneName || 'short'\n   const key = `${timezone}|${timeZoneName}`\n-  let dtf = dtfCache[key]\n-  if (!dtf) {\n-    dtf = new Intl.DateTimeFormat('en-US', {\n-      hour12: false,\n-      timeZone: timezone,\n-      year: 'numeric',\n-      month: '2-digit',\n-      day: '2-digit',\n-      hour: '2-digit',\n-      minute: '2-digit',\n-      second: '2-digit',\n-      timeZoneName\n-    })\n-    dtfCache[key] = dtf\n-  }\n-  return dtf\n+  // Always create a new Intl.DateTimeFormat to ensure correct timezone conversion\n+  return new Intl.DateTimeFormat('en-US', {\n+    hour12: false,\n+    timeZone: timezone,\n+    year: 'numeric',\n+    month: '2-digit',\n+    day: '2-digit',\n+    hour: '2-digit',\n+    minute: '2-digit',\n+    second: '2-digit',\n+    timeZoneName\n+  })\n }\n \n export default (o, c, d) => {\n@@ -147,4 +143,4 @@ export default (o, c, d) => {\n   d.tz.setDefault = function (timezone) {\n     defaultTimezone = timezone\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-2532", "model_patch": "diff --git a/src/plugin/utc/index.js b/src/plugin/utc/index.js\nindex f147357..514c797 100644\n--- a/src/plugin/utc/index.js\n+++ b/src/plugin/utc/index.js\n@@ -1,3 +1,4 @@\n+\n import { MILLISECONDS_A_MINUTE, MIN } from '../../constant'\n \n const REGEX_VALID_OFFSET_FORMAT = /[+-]\\d\\d(?::?\\d\\d)?/g\n@@ -14,7 +15,7 @@ function offsetFromString(value = '') {\n   const totalOffsetInMinutes = (+hoursOffset * 60) + (+minutesOffset)\n \n   if (totalOffsetInMinutes === 0) {\n-    return 0\n+    return indicator === '+' ? 0 : -0; // Ensure zero offset is handled consistently\n   }\n \n   return indicator === '+' ? totalOffsetInMinutes : -totalOffsetInMinutes\n@@ -146,4 +147,4 @@ export default (option, Dayjs, dayjs) => {\n     const localInput = dayjs(input).local()\n     return oldDiff.call(localThis, localInput, units, float)\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "webpack__webpack-14782", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "webpack__webpack-15454", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "prettier__prettier-12177", "model_patch": "diff --git a/src/language-js/printer-estree.js b/src/language-js/printer-estree.js\nindex ddb529f..aa37f50 100644\n--- a/src/language-js/printer-estree.js\n+++ b/src/language-js/printer-estree.js\n@@ -76,7 +76,7 @@ const {\n   printAssignmentExpression,\n } = require(\"./print/assignment.js\");\n const { printBinaryishExpression } = require(\"./print/binaryish.js\");\n-const { printSwitchCaseConsequent } = require(\"./print/statement.js\");\n+const { printSwitchCaseConsequent, printSwitchCaseComment } = require(\"./print/statement.js\");\n const { printMemberExpression } = require(\"./print/member.js\");\n const { printBlock, printBlockBody } = require(\"./print/block.js\");\n const { printComment } = require(\"./print/comment.js\");\n@@ -823,4 +823,4 @@ module.exports = {\n     remaining: handleComments.handleRemainingComment,\n   },\n   getCommentChildNodes: handleComments.getCommentChildNodes,\n-};\n+};\n"}
{"model_name_or_path": "agentless", "instance_id": "tqdm__tqdm-535", "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 26f9ce8..5c86887 100644\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -736,6 +736,7 @@ class tqdm(object):\n         if disable:\n             self.iterable = iterable\n             self.disable = disable\n+            self.total = total  # Ensure total is set even when disabled\n             self.pos = self._get_free_pos(self)\n             self._instances.remove(self)\n             self.n = initial\n"}
