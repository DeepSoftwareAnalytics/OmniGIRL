{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-11111", "model_patch": "diff --git a/src/util/pseudoElements.js b/src/util/pseudoElements.js\nindex 9f0e54c..3cc1363 100644\n--- a/src/util/pseudoElements.js\n+++ b/src/util/pseudoElements.js\n@@ -138,7 +138,7 @@ function movablePseudos(sel) {\n  * @returns {boolean}\n  */\n function isPseudoElement(node) {\n-  return node.value.startsWith('::') || elementProperties[node.value] !== undefined\n+  return node.value.startsWith('::') || node.value === 'marker' || elementProperties[node.value] !== undefined\n }\n \n /**\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-12324", "model_patch": "diff --git a/src/util/escapeClassName.js b/src/util/escapeClassName.js\nindex cb5924a..b44bc1b 100644\n--- a/src/util/escapeClassName.js\n+++ b/src/util/escapeClassName.js\n@@ -1,8 +1,9 @@\n+\n import parser from 'postcss-selector-parser'\n import escapeCommas from './escapeCommas'\n \n export default function escapeClassName(className) {\n   let node = parser.className()\n-  node.value = className\n+  node.value = className.replace(/-/g, '\\\\-')\n   return escapeCommas(node?.raws?.value ?? node.value)\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-6469", "model_patch": "diff --git a/src/util/escapeClassName.js b/src/util/escapeClassName.js\nindex cb5924a..ea40b49 100644\n--- a/src/util/escapeClassName.js\n+++ b/src/util/escapeClassName.js\n@@ -1,8 +1,9 @@\n+\n import parser from 'postcss-selector-parser'\n import escapeCommas from './escapeCommas'\n \n export default function escapeClassName(className) {\n   let node = parser.className()\n   node.value = className\n-  return escapeCommas(node?.raws?.value ?? node.value)\n+  return escapeCommas(node?.raws?.value ?? node.value).replace(/[\\[\\]]/g, '\\\\$&')\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7102", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7588", "model_patch": "diff --git a/src/processTailwindFeatures.js b/src/processTailwindFeatures.js\nindex 952e17a..5ffdc46 100644\n--- a/src/processTailwindFeatures.js\n+++ b/src/processTailwindFeatures.js\n@@ -27,7 +27,7 @@ export default function processTailwindFeatures(setupContext) {\n       registerDependency(dependency) {\n         result.messages.push({\n           plugin: 'tailwindcss',\n-          parent: result.opts.from,\n+          parent: result.opts.from || 'unknown',\n           ...dependency,\n         })\n       },\n@@ -55,4 +55,4 @@ export default function processTailwindFeatures(setupContext) {\n     collapseAdjacentRules(context)(root, result)\n     collapseDuplicateDeclarations(context)(root, result)\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "tailwindlabs__tailwindcss-7789", "model_patch": "diff --git a/src/util/parseObjectStyles.js b/src/util/parseObjectStyles.js\nindex cb54787..16c0a6a 100644\n--- a/src/util/parseObjectStyles.js\n+++ b/src/util/parseObjectStyles.js\n@@ -1,3 +1,4 @@\n+\n import postcss from 'postcss'\n import postcssNested from 'postcss-nested'\n import postcssJs from 'postcss-js'\n@@ -14,6 +15,6 @@ export default function parseObjectStyles(styles) {\n       }),\n     ]).process(style, {\n       parser: postcssJs,\n-    }).root.nodes\n+    }).root.nodes.filter(node => node.type !== 'comment')\n   })\n }\n"}
{"model_name_or_path": "agentless", "instance_id": "iamkun__dayjs-2532", "model_patch": "diff --git a/src/plugin/timezone/index.js b/src/plugin/timezone/index.js\nindex 832fb4a..78c68a4 100644\n--- a/src/plugin/timezone/index.js\n+++ b/src/plugin/timezone/index.js\n@@ -39,7 +39,17 @@ export default (o, c, d) => {\n   const makeFormatParts = (timestamp, timezone, options = {}) => {\n     const date = new Date(timestamp)\n     const dtf = getDateTimeFormat(timezone, options)\n-    return dtf.formatToParts(date)\n+    const parts = dtf.formatToParts(date)\n+    if (timezone === 'UTC' || timezone === 'Etc/UTC') {\n+      // Ensure no time change for zero offset timezones\n+      return parts.map(part => {\n+        if (part.type === 'hour') {\n+          part.value = date.getUTCHours().toString().padStart(2, '0')\n+        }\n+        return part\n+      })\n+    }\n+    return parts\n   }\n \n   const tzOffset = (timestamp, timezone) => {\n@@ -147,4 +157,4 @@ export default (o, c, d) => {\n   d.tz.setDefault = function (timezone) {\n     defaultTimezone = timezone\n   }\n-}\n+}\n"}
{"model_name_or_path": "agentless", "instance_id": "webpack__webpack-14782", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "webpack__webpack-15454", "model_patch": ""}
{"model_name_or_path": "agentless", "instance_id": "prettier__prettier-12177", "model_patch": "diff --git a/src/language-js/printer-estree.js b/src/language-js/printer-estree.js\nindex ddb529f..aa37f50 100644\n--- a/src/language-js/printer-estree.js\n+++ b/src/language-js/printer-estree.js\n@@ -76,7 +76,7 @@ const {\n   printAssignmentExpression,\n } = require(\"./print/assignment.js\");\n const { printBinaryishExpression } = require(\"./print/binaryish.js\");\n-const { printSwitchCaseConsequent } = require(\"./print/statement.js\");\n+const { printSwitchCaseConsequent, printSwitchCaseComment } = require(\"./print/statement.js\");\n const { printMemberExpression } = require(\"./print/member.js\");\n const { printBlock, printBlockBody } = require(\"./print/block.js\");\n const { printComment } = require(\"./print/comment.js\");\n@@ -823,4 +823,4 @@ module.exports = {\n     remaining: handleComments.handleRemainingComment,\n   },\n   getCommentChildNodes: handleComments.getCommentChildNodes,\n-};\n+};\n"}
{"model_name_or_path": "agentless", "instance_id": "tqdm__tqdm-535", "model_patch": "diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py\nindex 26f9ce8..d9bc6b0 100644\n--- a/tqdm/_tqdm.py\n+++ b/tqdm/_tqdm.py\n@@ -739,6 +739,7 @@ class tqdm(object):\n             self.pos = self._get_free_pos(self)\n             self._instances.remove(self)\n             self.n = initial\n+            self.total = total  # Ensure total is set even when disabled\n             return\n \n         if kwargs:\n"}
{"model_name_or_path": "agentless", "instance_id": "statsmodels__statsmodels-7757", "model_patch": "diff --git a/statsmodels/miscmodels/ordinal_model.py b/statsmodels/miscmodels/ordinal_model.py\nindex 91fc8bc..e26966d 100644\n--- a/statsmodels/miscmodels/ordinal_model.py\n+++ b/statsmodels/miscmodels/ordinal_model.py\n@@ -212,6 +212,9 @@ class OrderedModel(GenericLikelihoodModel):\n                 endog.name = endog_name\n                 is_pandas = True\n \n+        if not is_pandas and np.any(np.isnan(endog)):\n+            raise ValueError(\"missing values in endog are not supported\")\n+\n         return endog, labels, is_pandas\n \n     def _initialize_labels(self, labels, k_levels=None):\n"}
